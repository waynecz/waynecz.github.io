<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wayne</title>
  <subtitle>看多了会瞎</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://waynecz.github.io/"/>
  <updated>2017-02-28T02:40:44.000Z</updated>
  <id>http://waynecz.github.io/</id>
  
  <author>
    <name>Wayne</name>
    <email>451578533@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>从0开始做一个的Vue图片选择(上传)组件[基础向]</title>
    <link href="http://waynecz.github.io/2017/02/27/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E5%81%9A%E4%B8%80%E4%B8%AA%E7%9A%84Vue%E5%9B%BE%E7%89%87-%E6%96%87%E4%BB%B6%E9%80%89%E6%8B%A9-%E4%B8%8A%E4%BC%A0-%E7%BB%84%E4%BB%B6-%E5%9F%BA%E7%A1%80%E5%90%91/"/>
    <id>http://waynecz.github.io/2017/02/27/从0开始做一个的Vue图片-文件选择-上传-组件-基础向/</id>
    <published>2017-02-27T04:51:11.000Z</published>
    <updated>2017-02-28T02:40:44.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://segmentfault.com/img/bVJQgt?w=1318&amp;h=966" alt="clipboard.png"></p>
<p>之前用Vue做了一个基础的组件<a href="https://github.com/waynecz/vue-img-inputer" target="_blank" rel="external">vue-img-inputer</a>，下面就叫<code>vii</code>，记录下在开发过程中遇到的<strong><em>知识点</em></strong>（都算比较基础，具体代码不会贴太多，都可以在<a href="https://github.com/waynecz/vue-img-inputer" target="_blank" rel="external">项目</a>仓库里看到）。</p>
<p>上传文件很多项目都要用到，一些组件库里(ele/iview…)<code>文件上传组件</code>都是做成了标配，虽然<code>vii</code>和<code>uploader</code><a href="https://segmentfault.com/a/1190000008439300" target="_blank" rel="external">定位还是有些差别</a>，但实现上都有几个共同要点：</p>
<blockquote>
<ol>
<li>样子要好看点</li>
<li>图片/文件选择后预览</li>
<li>实现拖拽选择文件</li>
<li>图片选择后执行某些动作（譬如uploader的上传等）</li>
</ol>
</blockquote>
<h2 id="先上demo"><a href="#先上demo" class="headerlink" title="先上demo"></a>先上<a href="http://waynecz.github.io/VueImgInputer/index.html">demo</a></h2><p>注： 下面有些地方会有些啰嗦，请选择观看</p>
<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>首先我们有个文件选择框，恩，长这样：</p>
<p><img src="https://segmentfault.com/img/bVJOJb?w=572&amp;h=82" alt="clipboard.png"></p>
<p>好丑啊！！我们来让它变好看点：</p>
<h3 id="第一个方法：修改自身CSS"><a href="#第一个方法：修改自身CSS" class="headerlink" title="第一个方法：修改自身CSS"></a>第一个方法：修改自身CSS</h3><p>这里有一个<a href="https://www.toobug.net/article/what_is_shadow_dom.html" target="_blank" rel="external">shadowDOM</a>的概念，简单的来说就是我们经常用到的一些HTML标准组件（例如<code>viedo</code>，甚至<code>滚动条</code>）其实是由若干个更基础的DOM由浏览器封装成的，使得我们调用只要一个标签就够了，这类也就是<code>WebComponent</code>，这里具体不展开了。我们先来看下file-input的内部是如何的（chrome devtool不<a href="http://www.cnblogs.com/liyunhua/p/4544738.html#_label13" target="_blank" rel="external">设置</a>是看不到的）：</p>
<p><img src="https://segmentfault.com/img/bVJOSY?w=734&amp;h=218" alt="clipboard.png"></p>
<p>所以呢，直接给file-input修改样式这个按钮会一直存在的！我们要么把按钮移出视线，要么就用这个按钮修改其样式。这里就修改下里面这个type=button的样式，只提供个思路，代码：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">    <span class="selector-tag">input</span> &#123;</div><div class="line">        <span class="attribute">font-size</span>: <span class="number">0</span>; <span class="comment">/* 为了去掉‘未选择任何文件’这几个字，也可以随便弄到哪里*/</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">/* 注意不是直接input &gt; input[type=button] 哦*/</span></div><div class="line">    <span class="selector-tag">input</span><span class="selector-pseudo">::-webkit-file-upload-button</span> &#123;</div><div class="line">        <span class="attribute">background</span>: <span class="number">#efeeee</span>;</div><div class="line">        <span class="attribute">color</span>: <span class="number">#333</span>;</div><div class="line">        <span class="attribute">border</span>: <span class="number">0</span>;</div><div class="line">        <span class="attribute">padding</span>: <span class="number">40px</span> <span class="number">100px</span>;</div><div class="line">        <span class="attribute">border-radius</span>: <span class="number">5px</span>;</div><div class="line">        <span class="attribute">font-size</span>: <span class="number">12px</span>;</div><div class="line">        <span class="attribute">box-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">5px</span> <span class="built_in">rgba</span>(0,0,0,.1), <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="built_in">rgba</span>(0,0,0,.12);</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<p>有没有想到chrome修改滚动条样式呢？哈哈，其实是一个道理，现在file-input变这样了：</p>
<p><img src="https://segmentfault.com/img/bVJOTH?w=598&amp;h=256" alt="clipboard.png"></p>
<p>好像挺简单！然而我们看到<code>-webkit-</code>就应该知道兼容性了，这种方法只有safari和chrome笑笑，其他GG，所以自然不能这么干。</p>
<h3 id="第二个方法：给file-input找个替身"><a href="#第二个方法：给file-input找个替身" class="headerlink" title="第二个方法：给file-input找个替身"></a>第二个方法：给file-input找个替身</h3><p>是这样，我们可以可以把file-input整个移出视线，再找个找几个元素，通过点击这些个元素来代理原file-input的点击，呼出文件选择框呢？</p>
<p>自然是可以的，<code>label</code>标注标签, 给label一个<code>for</code>属性指向input的唯一<code>id</code>，这样点击label就相当于点击input, 所以我们可以这么写：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"id"</span> <span class="attr">type</span>=<span class="string">"file"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- other element--&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">input</span> &#123;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">left</span>: -<span class="number">9999px</span>;</div><div class="line">&#125;    </div><div class="line"><span class="comment">/* 使label充满整个box*/</span></div><div class="line"><span class="selector-tag">label</span> &#123;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">top</span>: <span class="number">0</span>;<span class="attribute">left</span>: <span class="number">0</span>;<span class="attribute">right</span>: <span class="number">0</span>;<span class="attribute">bottom</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">z-index</span>: <span class="number">10</span>; <span class="comment">/* 这个z-index之后说到*/</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样子做之后，就有一个组件的影子了，其中</p>
<ul>
<li>因为<code>label</code>充满了整个box，所以点击box就可以选择文件</li>
<li>同时有了box，可以往里面填充任何元素，譬如一个icon<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"id"</span> <span class="attr">type</span>=<span class="string">"file"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"iconfont"</span>&gt;</span>:)<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!--  ...发挥你的想象力--&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>好了，基础基本上啰嗦完了，正式进入vue的实现(Vue 2.x)：</p>
<h2 id="文件选择的处理"><a href="#文件选择的处理" class="headerlink" title="文件选择的处理"></a>文件选择的处理</h2><p>这块讲<code>文件数据</code>的获取和处理:</p>
<h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><p>如果问你vue里你想要组件绑定一个输入值的最粗暴的方式是什么？<code>v-model</code>啊！但是这条指令其实是一个语法糖：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">imgInputer</span> <span class="attr">v-model</span>=<span class="string">"target"</span>&gt;</span><span class="tag">&lt;/<span class="name">imgInputer</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 默认等同于下面几行--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">imgInputer</span> <span class="attr">ref</span>=<span class="string">"x"</span> <span class="attr">:value</span>=<span class="string">"target"</span>&gt;</span><span class="tag">&lt;/<span class="name">imgInputer</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line">    ...</div><div class="line">    <span class="comment">// 默认给这个组件对象绑定input事件！</span></div><div class="line">    <span class="keyword">this</span>.$refs.x.$on(<span class="string">'input'</span>, value =&gt; &#123;<span class="keyword">this</span>.target = value&#125;)</div><div class="line">    ...</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="所以文件选择传值的实现方式："><a href="#所以文件选择传值的实现方式：" class="headerlink" title="所以文件选择传值的实现方式："></a>所以文件选择传值的实现方式：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> @<span class="attr">change</span>=<span class="string">"handleFileChange"</span> <span class="attr">ref</span>=<span class="string">"inputer"</span> <span class="attr">...</span>/&gt;</span></div><div class="line">      ...</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    ...</div><div class="line">    props: &#123;</div><div class="line">        <span class="attr">value</span>: &#123;</div><div class="line">            <span class="comment">// 绑定默认的value prop</span></div><div class="line">            <span class="keyword">default</span>: <span class="literal">undefined</span></div><div class="line">        &#125;,</div><div class="line">    &#125;,</div><div class="line">    ...</div><div class="line">    <span class="comment">// input的change回调第一个参数是event对象</span></div><div class="line">    methods: &#123;</div><div class="line">        handleFileChange (e) &#123;</div><div class="line">            <span class="keyword">let</span> inputDOM = <span class="keyword">this</span>.$refs.inputer;</div><div class="line">            <span class="comment">// 通过DOM取文件数据</span></div><div class="line">            <span class="keyword">this</span>.file    = inputDOM.files[<span class="number">0</span>];</div><div class="line">            <span class="keyword">this</span>.errText = <span class="string">''</span>;</div><div class="line">    </div><div class="line">            <span class="keyword">let</span> size = <span class="built_in">Math</span>.floor(<span class="keyword">this</span>.file.size / <span class="number">1024</span>);</div><div class="line">            <span class="keyword">if</span> (size &gt; ...) &#123;</div><div class="line">                <span class="comment">// 这里可以加个文件大小控制</span></div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">            &#125;</div><div class="line">    </div><div class="line">            <span class="comment">// 触发这个组件对象的input事件</span></div><div class="line">            <span class="keyword">this</span>.$emit(<span class="string">'input'</span>, <span class="keyword">this</span>.file);</div><div class="line">            </div><div class="line">            <span class="comment">// 这里就可以获取到文件的名字了</span></div><div class="line">            <span class="keyword">this</span>.fileName = <span class="keyword">this</span>.file.name;</div><div class="line">            </div><div class="line">            <span class="comment">// 这里加个回调也是可以的</span></div><div class="line">            <span class="keyword">this</span>.onChange &amp;&amp; <span class="keyword">this</span>.onChange(<span class="keyword">this</span>.file, inputDOM.value);</div><div class="line">      </div><div class="line">        &#125;,</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 调用--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">imgInputer</span> <span class="attr">v-model</span>=<span class="string">"target"</span>&gt;</span><span class="tag">&lt;/<span class="name">imgInputer</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这样选中的文件就会传给target了，接着说图片预览</p>
<h2 id="图片预览"><a href="#图片预览" class="headerlink" title="图片预览"></a>图片预览</h2><p>思路有两种：</p>
<ol>
<li>选择文件后直上传然后得到网络url</li>
<li>用HTML5的<code>File API</code>的<code>FileReader</code>图片本地转成base64格式的url</li>
</ol>
<p>然后将url赋值给一个img标签</p>
<p>我们这里肯定选择第二种，所以先介绍下：</p>
<h3 id="FileReader"><a href="#FileReader" class="headerlink" title="FileReader"></a>FileReader</h3><p>照例贴<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader" target="_blank" rel="external">MDN文档先</a>，然后是代码：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">"box"</span>&gt;</span></div><div class="line">      ...</div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">...</span> /&gt;</span></div><div class="line">      // 给个img来承担预览工作就行了</div><div class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"dataUrl"</span> /&gt;</span></div><div class="line">      ...</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">sctipt</span>&gt;</span></div><div class="line">    data () &#123;</div><div class="line">        return &#123;</div><div class="line">            // 转base64码后的data字段</div><div class="line">            dataUrl: ''</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    methods: &#123;,</div><div class="line">        imgPreview (file) &#123;</div><div class="line">            let self = this;</div><div class="line">            // 看支持不支持FileReader</div><div class="line">            if (!file || !window.FileReader) return;</div><div class="line">    </div><div class="line">            if (/^image/.test(file.type)) &#123;</div><div class="line">                // 创建一个reader</div><div class="line">                var reader = new FileReader();</div><div class="line">                // 将图片将转成 base64 格式</div><div class="line">                reader.readAsDataURL(file);</div><div class="line">                // 读取成功后的回调</div><div class="line">                reader.onloadend = function () &#123;</div><div class="line">                    self.dataUrl = this.result;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        handleFileChange (e) &#123;</div><div class="line">            ...</div><div class="line">            this.file = inputDOM.files[0];</div><div class="line">            ...</div><div class="line">            // 在获取到文件对象进行预览就行了！</div><div class="line">            this.imgPreview(this.file);</div><div class="line">            ...</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>当然了，这东西的兼容性有点捉鸡: IE10+, 移动端可以快乐的使用。</p>
<p><img src="https://segmentfault.com/img/bVJP3q?w=1184&amp;h=348" alt="clipboard.png"></p>
<p>预览就这么完成了，下一个我们来说拖拽！</p>
<h2 id="拖拽选择"><a href="#拖拽选择" class="headerlink" title="拖拽选择"></a>拖拽选择</h2><p>拖拽说白了就是一个事件监听，drop事件，我们从头开始说起</p>
<h3 id="浏览器拖拽事件"><a href="#浏览器拖拽事件" class="headerlink" title="浏览器拖拽事件"></a>浏览器拖拽事件</h3><p>首先，放<code>DragEVent</code>的<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/DragEvent" target="_blank" rel="external">MDN文档</a>，重点是下面四个事件及解释：</p>
<blockquote>
<ul>
<li><code>dragenter</code><br> 当拖动的元素或选择文本输入有效的放置目标时，会触发此事件。</li>
<li><code>dragleave</code><br> 当拖动的元素或文本选择离开有效的放置目标时，会触发此事件。</li>
<li><code>dragover</code><br> 当将元素或文本选择拖动到有效放置目标（每几百毫秒）上时，会触发此事件。</li>
<li><code>drop</code><br> 当在有效放置目标上放置元素或选择文本时触发此事件。</li>
</ul>
<hr>
<p>以及dataTransfer对象：在拖放交互期间传输的数据。<br>获取方法： <code>event.dataTransfer</code></p>
</blockquote>
<p>为什么要关注着几个呢？因为<strong>浏览器是自身监听这几个拖放事件的</strong>！！譬如你把图片或者pdf拖进浏览器里。浏览器是会试图打开这个文件的，所以我们要干掉默认行为，很简单<code>e.preventDefault()</code>：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">methods: &#123;</div><div class="line">    preventDefaultEvent (eventName) &#123;</div><div class="line">        document.addEventListener(eventName, function (e) &#123;</div><div class="line">            e.preventDefault();</div><div class="line">        &#125;, false)</div><div class="line">    &#125;,</div><div class="line">&#125;,</div><div class="line">mounted () &#123;</div><div class="line">    // 阻止浏览器默认的拖拽时事件，测试阻止这几个就够了，不放心就全阻止一遍吧</div><div class="line">    ['dragleave', 'drop', 'dragenter', 'dragover'].forEach(e =&gt; &#123;</div><div class="line">        this.preventDefaultEvent(e);</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line">...</div></pre></td></tr></table></figure>
<p>做完这一步，我们只需监听目标上的<code>drop</code>事件就行了，稍微改造下代码：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">"box"</span>&gt;</span></div><div class="line">      ...</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    ...</div><div class="line">    addDropSupport () &#123;</div><div class="line">        <span class="keyword">let</span> BOX = <span class="keyword">this</span>.$refs.box;</div><div class="line">        BOX.addEventListener(<span class="string">'drop'</span>, (e) =&gt; &#123;</div><div class="line">            e.preventDefault();</div><div class="line">            <span class="keyword">this</span>.errText = <span class="string">''</span>;</div><div class="line">            <span class="comment">// 上面给的MDN文档里有讲到dataTransfer承载拖拽数据</span></div><div class="line">            <span class="keyword">let</span> fileList = e.dataTransfer.files; <span class="comment">// 其实这就是文件对象列表了</span></div><div class="line">            <span class="comment">// 总得拖一个文件吧</span></div><div class="line">            <span class="keyword">if</span> (fileList.length === <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 格式限制</span></div><div class="line">            <span class="keyword">if</span> (fileList[<span class="number">0</span>].type.indexOf(<span class="string">'image'</span>) === <span class="number">-1</span>) &#123;</div><div class="line">                <span class="keyword">this</span>.errText = <span class="string">'请选择图片文件'</span>;</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 这次限制下只能拖一个文件</span></div><div class="line">            <span class="keyword">if</span> (fileList.length &gt; <span class="number">1</span>) &#123;</div><div class="line">                <span class="keyword">this</span>.errText = <span class="string">'暂不支持多文件'</span>;</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">this</span>.handleFileChange(<span class="literal">null</span>, fileList[<span class="number">0</span>]);</div><div class="line">        &#125;)</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 加入第二个参数</span></div><div class="line">    handleFileChange (e, FILE) &#123; </div><div class="line">        <span class="comment">// 数据赋值改动，这样就兼容两种选择方式了</span></div><div class="line">        <span class="keyword">this</span>.file = FILE || inputDOM.files[<span class="number">0</span>];</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>其实到这里重要的点都讲了，接下来说些其他的</p>
<h2 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h2><ul>
<li><code>uploader</code>的话选择完图片在<code>handleFileChange</code>里直接执行个请求上传</li>
<li>在父组件里获取值该怎么传怎么传</li>
</ul>
<h2 id="其他一些东西"><a href="#其他一些东西" class="headerlink" title="其他一些东西"></a>其他一些东西</h2><ul>
<li>当页面中需要多个<code>inputer</code>时，同一个input的id会冲突，所以不指定的情况下需要个唯一id：</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">    ...</div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">:id</span>=<span class="string">"inputId"</span> <span class="attr">...</span> /&gt;</span></div><div class="line">    ...</div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">...</div><div class="line">methods: &#123;</div><div class="line">    gengerateID () &#123;</div><div class="line">        <span class="keyword">let</span> nonstr = <span class="built_in">Math</span>.random().toString(<span class="number">36</span>).substring(<span class="number">3</span>, <span class="number">8</span>);</div><div class="line">        <span class="keyword">if</span> (!<span class="built_in">document</span>.getElementById(nonstr)) &#123;</div><div class="line">            <span class="keyword">return</span> nonstr</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.gengerateID()</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">&#125;,</div><div class="line">mounted () &#123;</div><div class="line">    <span class="keyword">this</span>.inputId = <span class="keyword">this</span>.id || <span class="keyword">this</span>.gengerateID();</div><div class="line">&#125;    </div><div class="line">...</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>input原本可以指定接收的文件格式，会在选择框出来的时候默认无法选择非指定格式的文件</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- accept属性--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">accept</span>=<span class="string">"image/*,video/*;"</span> <span class="attr">...</span>/&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>移动端允许拍照选择<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- capture属性--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">capture</span>=<span class="string">"video"</span> <span class="attr">...</span>/&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><ul>
<li>暂时就这么多了，完整的<a href="https://github.com/waynecz/vue-img-inputer/blob/master/src/component/imgInputer.vue" target="_blank" rel="external">源码在这里</a></li>
<li>有任何讲的不对不好的地方请大力指正！</li>
<li>欢迎star😁</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://segmentfault.com/img/bVJQgt?w=1318&amp;amp;h=966&quot; alt=&quot;clipboard.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;之前用Vue做了一个基础的组件&lt;a href=&quot;https://github.com/wa
    
    </summary>
    
      <category term="前端" scheme="http://waynecz.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://waynecz.github.io/tags/javascript/"/>
    
      <category term="HTML" scheme="http://waynecz.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>页面元素谁上谁下的体位总结</title>
    <link href="http://waynecz.github.io/2016/05/16/%E9%A1%B5%E9%9D%A2%E5%85%83%E7%B4%A0%E8%B0%81%E4%B8%8A%E8%B0%81%E4%B8%8B%E7%9A%84%E4%BD%93%E4%BD%8D%E6%80%BB%E7%BB%93/"/>
    <id>http://waynecz.github.io/2016/05/16/页面元素谁上谁下的体位总结/</id>
    <published>2016-05-16T14:32:48.000Z</published>
    <updated>2016-05-27T02:51:47.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xntdk.com1.z0.glb.clouddn.com/P40709-124114.jpg" alt=""></p>
<h1 id="从浏览器渲染说起"><a href="#从浏览器渲染说起" class="headerlink" title="从浏览器渲染说起"></a>从浏览器渲染说起</h1><p>一个页面的渲染，大致有下几个步骤</p>
<p><img src="http://waynecz.github.io/css/images/postimg/160516/1.jpg" alt=""></p>
<p>这里直接看最后一步<code>Composite: 渲染层合并</code>，这步是渲染最后一个步骤，作用就是把之前绘制的图层（如果有PS的经验的话<code>图层</code>很好理解）按照规定的顺序合并成一个图层，元素的层叠谁在上面谁在下面的关系，就在这步里被规定被最终在浏览器里体现出来了。</p>
<p>那么这个对层叠理解有什么用呢？。。。。。。。。。。并没什么卵用，只是最近看到了而已，科科，直接进入正题吧，个人总结，会比较乱。</p>
<a id="more"></a>
<p>挂两篇大神的文章</p>
<ul>
<li><a href="http://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index/" target="_blank" rel="external">鑫旭大神的深入理解CSS中的层叠上下文和层叠顺序</a></li>
<li><a href="http://www.cnblogs.com/bfgis/p/5440956.html" target="_blank" rel="external">吹雪大大的不起眼的 z-index 却能牵扯出这么大的学问</a><br>首先其实看完上面两篇基本就够了，不过如果你实在闲的慌又想绕一下自己，好嘞，当我没说，请继续观赏<br><img src="http://waynecz.github.io/css/images/postimg/160516/6.jpg" alt=""></li>
</ul>
<h2 id="普通我上还是你上的几种体位"><a href="#普通我上还是你上的几种体位" class="headerlink" title="普通我上还是你上的几种体位"></a>普通<code>我上还是你上</code>的几种体位</h2><p>简单说几种常见情况：</p>
<ul>
<li>文档中后来的居上</li>
</ul>
<p>结构如下，这里默认box都有长宽和不同的背景颜色</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"you"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"me"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>很显然如果<code>我</code>有一个负值<code>margin</code>就会看到<code>我上你下</code>的情况</p>
<ul>
<li><code>z-index正值&gt;auto(0)&gt;负值</code>前面的居上</li>
</ul>
<p>这里首先要明白的是<code>z-index</code>只针对<strong><code>position</code>不是<code>static</code></strong>的元素起作用。所以我们这里说起<code>z-index</code>，那这个元素一定是和<code>position</code>一起使用。而如果只指定<code>position</code>，那么该元素会默认<code>z-index:auto</code>, have a look</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"you"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"me"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-class">.you</span> &#123;</div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.me</span> &#123;</div><div class="line">    <span class="attribute">position</span>: relaive;</div><div class="line">    <span class="attribute">z-index</span>: -<span class="number">1</span>;</div><div class="line">    <span class="attribute">margin-top</span>: -<span class="number">10px</span>;</div><div class="line">&#125;  </div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<p>嗯，这里就<code>你</code>上<code>我</code>下了</p>
<ul>
<li><code>float</code>的元素和<code>position</code>不为<code>static</code>的元素比普通文档流的居上</li>
</ul>
<p>就不演示了！</p>
<hr>
<p>好了，上面的四种情况算是最正常也是比较容易理解的情况了吧，那么问题就来了,如果我<code>float</code>了和你<code>z-index: -1</code>了发生重叠呢？如果你<code>z-inidex: auto</code>又或<code>z-inidex: 1</code>了呢？ 是不是要愣一下呢哈哈哈，不急，看个宝贝。<br><img src="http://waynecz.github.io/css/images/postimg/160516/3.png" alt="盗来的图"><br>嗒哒，什么属性的元素有什么样的层叠等级，按照这张图上面的问题就简单了，<code>float</code>在负值<code>z-index</code>上，在<code>auto或正值</code>之下。咦？这里咋还有<code>inline-block</code>的事呢，还这么高等级捏？？这是因为内容要大于布局，不展开(顶部有鑫旭大神的文章，里面有做介绍)。</p>
<p>OK，我想是时候迎接这篇文章的<code>高潮</code>了，有孩子的抱稳了！上图中位于最底层的<code>层叠上下文</code>五个大字看到没有？目前我们都是把要比较元素放在以同一个层叠上下文为基底的环境内做比较，但是所有元素都会在这一个环境内吗？咳咳，我喝口水慢慢喷：</p>
<h2 id="一个重要的概念——层叠上下文（stacking-context）"><a href="#一个重要的概念——层叠上下文（stacking-context）" class="headerlink" title="一个重要的概念——层叠上下文（stacking context）"></a>一个重要的概念——层叠上下文（stacking context）</h2><p>不得不说这个词对于我这样的人从中文上理解简直是十脸懵逼</p>
<p><img src="http://waynecz.github.io/css/images/postimg/160516/2.png" alt=""></p>
<p>上下文？context？WTF？好吧，其实这东西是一个抽象的概念，如果让我来翻译它，我觉得比较合适的解释：创建层叠上下文的元素自己会成为一个<code>参考对象</code>。</p>
<p>既然是一个参考对象，那么谁来参考它呢？答案是它的<code>子元素们</code>（其实这并不是完全正确，但是可以先这么认为）。然后这个<code>参考对象</code>什么时候会被用到呢？</p>
<h3 id="直接干巴巴的说个情景："><a href="#直接干巴巴的说个情景：" class="headerlink" title="直接干巴巴的说个情景："></a>直接干巴巴的说个情景：</h3><p>页面里你随便找两个元素(为了区分就是<code>我</code>和<code>你</code>吧)，如果我和你要比较谁更高人一等怎么办呢？</p>
<ol>
<li><p>浏览器会做的就是<code>不断向上检索祖辈元素，直到这个祖辈创建过层叠上下文(也就是这个祖辈可以当做参考对象)</code>。<br>得到了两个元素各自的<code>参考对象</code>（这里称呼为<code>我爸爸</code>和<code>你爸爸</code>）然后呢，这时就分两种情况！分两种情况！分两种情况：</p>
</li>
<li><p>如果<code>我爸爸</code>和<code>你爸爸</code>是一个人！OK,这时<strong><code>我</code>和<code>你</code>就是在一个层叠上下文中了</strong>，就可以按照上面盗来的层叠等级图进行谁上谁下的判断了</p>
</li>
<li>如果是不一样的呢？？？那事情就变得有趣多了——<code>我</code>和<code>你</code>就不!会!去!进!行!比!较!了!！。这场较量一下子会变成<code>我爸爸</code>和<code>你爸爸</code>间的战斗了（嘿，你崽子敢动我崽子。动你崽子咋滴啦，你不服咱两干啊。干！）<br>然后他们两就干起来了，他们两干的方式就和我和你一样，去找各自<code>参考对象</code>——得到<code>我爷爷</code>和<code>你爷爷</code>。然后来看是否同一个人，如果是的话<code>我爸爸</code>和<code>你爸爸</code>就是在一个层叠上下文中了，就会在<code>爷爷辈这个参考对象上</code>比出个高低，而这个高低！就是<code>我</code>和<code>你</code>的高低，换句话说就是高低由我和你的参考对象决定了。如果<code>我爷爷</code>和<code>你爷爷</code>还是不一样呢…..Go on</li>
</ol>
<p>讲的有点绕是不是，没关系！再听我讲几句，你会更晕的</p>
<h3 id="接下来说谁会是参考对象（创建了层叠上下文）"><a href="#接下来说谁会是参考对象（创建了层叠上下文）" class="headerlink" title="接下来说谁会是参考对象（创建了层叠上下文）"></a>接下来说谁会是<code>参考对象</code>（创建了层叠上下文）</h3><ul>
<li><code>html</code>天然就是，这就可以去把前面那些简单的例子套进来了，因为它们的参考对象都是html根元素了，所以可以直接在同一环境（上下文）比较。</li>
<li><code>position</code>不为<code>static</code>且<code>z-index</code>不是auto的元素</li>
<li><code>display</code>为<code>flex</code>且<code>z-index</code>不是auto的元素</li>
<li><code>opacity</code>不等于1</li>
<li><code>transform</code>不等于none</li>
</ul>
<p>好了，到这个时候就该上例子了：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"me"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"you"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-class">.me</span> &#123;</div><div class="line">   <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">   <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.you</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">left</span>: <span class="number">50px</span>;</div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">    <span class="attribute">z-index</span>: -<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<p>来理解下，you在这里和me做比较，比较开始，首先you寻找参考对象，上一层me是吗？显然不是，因为me没有触发上面任一条件创建层叠上下文，所以继续往上寻找，找到html，好的，是！</p>
<p>对于me呢，也直接往上找到html，所以这个例子里me和you是在以html为参考对象进行比较，<strong>换句话说就是在html创建的层叠上下文环境中进行比较</strong>！</p>
<p>然后按照七阶图，负值index在block元素之下！所以me在you之上</p>
<p><img src="http://waynecz.github.io/css/images/postimg/160516/4.png" alt=""></p>
<p>然后我们修改下me,加个。。。就加个<code>opacity</code>吧<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.me</span> &#123;</div><div class="line">    <span class="attribute">opacity</span>: .<span class="number">9</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="http://waynecz.github.io/css/images/postimg/160516/5.png" alt=""></p>
<p>按照之前的思路演算一遍，you的参考对象变成me了！而me仍然是html，然后me和html再做比较，me参考对象是html，html的参考对象是html，OK，在同一上下文了，me（you的爸爸）明显高于html（me的爸爸），所以you高于me</p>
<p>就不举复杂的例子了，其实都一样，用这个规则去分析，我自己觉得会很清晰！</p>
<p>有错误或者写的烂欢迎指出来批评讨论！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xntdk.com1.z0.glb.clouddn.com/P40709-124114.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;从浏览器渲染说起&quot;&gt;&lt;a href=&quot;#从浏览器渲染说起&quot; class=&quot;headerlink&quot; title=&quot;从浏览器渲染说起&quot;&gt;&lt;/a&gt;从浏览器渲染说起&lt;/h1&gt;&lt;p&gt;一个页面的渲染，大致有下几个步骤&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://waynecz.github.io/css/images/postimg/160516/1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这里直接看最后一步&lt;code&gt;Composite: 渲染层合并&lt;/code&gt;，这步是渲染最后一个步骤，作用就是把之前绘制的图层（如果有PS的经验的话&lt;code&gt;图层&lt;/code&gt;很好理解）按照规定的顺序合并成一个图层，元素的层叠谁在上面谁在下面的关系，就在这步里被规定被最终在浏览器里体现出来了。&lt;/p&gt;
&lt;p&gt;那么这个对层叠理解有什么用呢？。。。。。。。。。。并没什么卵用，只是最近看到了而已，科科，直接进入正题吧，个人总结，会比较乱。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://waynecz.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="css" scheme="http://waynecz.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>请问这this是那个？-- this指向理清</title>
    <link href="http://waynecz.github.io/2016/05/11/%E7%AE%80%E5%8D%95%E7%9A%84%E7%90%86%E8%A7%A3this/"/>
    <id>http://waynecz.github.io/2016/05/11/简单的理解this/</id>
    <published>2016-05-11T05:17:01.000Z</published>
    <updated>2016-05-28T14:09:49.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xntdk.com1.z0.glb.clouddn.com/Jasper,%20a%20humbling%20presence.jpg" alt=""></p>
<p>5.28日更新，最近发现ES6的尖头函数中的this有点巧妙，不适用于以下三条规则，在后面补充下</p>
<hr>
<h3 id="开头放结论"><a href="#开头放结论" class="headerlink" title="开头放结论"></a>开头放结论</h3><p><strong>一个函数如果被调用或者执行了，那么函数中的this指向：</strong></p>
<ul>
<li>一般情况下指向执行时调用其的对象</li>
<li>函数当作构造函数使用且函数内没有返回值，或返回值是5种基本型（Undefined类型、Null类型、Boolean类型、Number类型、String类型）之一，指向实例后的对象</li>
<li>函数当作构造函数使用且有return值，返回是是数组啊、对象啊什么的，this指向返回值<br>接下来稍微解释下<a id="more"></a>
</li>
</ul>
<p>其实上面也不是全部情况（例如use strict等），但是基本囊括了所有情况，来一一举例下，第一种：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> normal = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> a = <span class="string">'你大爷'</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</div><div class="line">&#125;</div><div class="line">a()</div><div class="line"><span class="comment">// Unddefined</span></div><div class="line"><span class="comment">// Window对象</span></div></pre></td></tr></table></figure>
<p>这种有一定隐蔽性，但是如果换个写法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.a()</div><div class="line"><span class="comment">// Unddefined</span></div><div class="line"><span class="comment">// Window对象</span></div></pre></td></tr></table></figure>
<p>会不会好理解点了呢，因为a其实是定义在window上的，所以它的执行或者说被调用自然也是window来动手，所以按照第一条<code>指向执行时调用其的最近的对象</code>，这里的this就指向<code>window</code>对象，而window上并没有<code>a</code>这个变量，自然是undefined</p>
<p>第二种:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> normal = &#123;</div><div class="line">    <span class="attr">a</span>: <span class="string">'你大爷'</span>,</div><div class="line">    <span class="attr">fn</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</div><div class="line">    &#125;</div><div class="line">&#125; </div><div class="line">normal.fn()</div><div class="line"><span class="comment">// normal</span></div><div class="line"><span class="comment">//你大爷</span></div></pre></td></tr></table></figure>
<p>这里this在fn里面，而谁调用了fn呢？normal！所以this指向normal，<code>normal.a</code>就是<code>你大爷</code></p>
<p>诶！这个时候可能你会说了，上面的代码不是和<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.normal.fn()</div></pre></td></tr></table></figure></p>
<p>一样吗？那this为什么不是window而是nomal呢，让我们来补充下第一个结论</p>
<blockquote>
<p>一般情况下指向执行时调用其的<code>最近</code>的对象</p>
</blockquote>
<p>这样是不是会好理解点了呢？不急，我们再来看几个<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> normal = &#123; </div><div class="line">    <span class="attr">a</span>: <span class="string">'你大爷'</span>,</div><div class="line">    <span class="attr">fn</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</div><div class="line">    &#125;</div><div class="line">&#125; </div><div class="line"><span class="comment">// 不一样在这里</span></div><div class="line"><span class="keyword">var</span> haha = normal.fn</div><div class="line">haha()</div><div class="line"><span class="comment">// window</span></div><div class="line"><span class="comment">// Undefined</span></div></pre></td></tr></table></figure></p>
<p>是不是很奇怪？其实想一下<code>haha()</code>的执行其实是这样子的<code>window.haha()</code>就没问题了吧，但是为什么是这样呢？ 我们这样说，normal.fn并没有执行其实是一个函数的引用所以haha其实也是个引用，所以当haha()执行了，调用它的还是window 。</p>
<h2 id="接下来说构造函数的情况"><a href="#接下来说构造函数的情况" class="headerlink" title="接下来说构造函数的情况"></a>接下来说构造函数的情况</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> construction = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.a = <span class="string">'你大爷'</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> me = <span class="keyword">new</span> construction()</div><div class="line"><span class="built_in">console</span>.log(me.a )</div><div class="line"><span class="comment">// 你大爷</span></div></pre></td></tr></table></figure>
<p>new会创建一个匿名对象，然后把构造函数里的this指向这个匿名对象，这里最后又把匿名对象赋值给me，有点给匿名对象赋予名字的意思，所以匿名对象有a属性，me自然也有了，不知道讲明白没</p>
<h3 id="然后，如果构造函数有返回值而且返回的是一个数组或对象"><a href="#然后，如果构造函数有返回值而且返回的是一个数组或对象" class="headerlink" title="然后，如果构造函数有返回值而且返回的是一个数组或对象"></a>然后，如果构造函数有返回值而且返回的是一个数组或对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> construction = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.a = <span class="string">'你大爷'</span>;</div><div class="line">    <span class="keyword">return</span> &#123;<span class="attr">a</span>: <span class="string">'嘿嘿嘿'</span>&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> me = <span class="keyword">new</span> construction() </div><div class="line"><span class="built_in">console</span>.log(me.a)</div><div class="line"><span class="comment">// 嘿嘿嘿</span></div><div class="line"><span class="keyword">var</span> construction = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.a = <span class="string">'你大爷'</span>;</div><div class="line">    <span class="keyword">return</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> me = <span class="keyword">new</span> construction() </div><div class="line"><span class="built_in">console</span>.log(me)</div><div class="line"><span class="comment">// [1,2,3,4]</span></div></pre></td></tr></table></figure>
<p>这个时候其实new就像是并没有最终创建一个匿名对象，而是选择接受构造函数返回值然后再赋予实例，所以实例后的me会是构造函数的返回值，有点绕口啊～但是不是所有返回值都会产生这样的情况呢，答案是<code>不</code>！就像开头说的，如果返回值是<code>Undefined、Null、Boolean、Number、String</code>之一，情况就会</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> construction = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.a = <span class="string">'你大爷'</span>;</div><div class="line">    <span class="keyword">return</span> <span class="string">'哈哈哈'</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> me = <span class="keyword">new</span> construction() </div><div class="line"><span class="built_in">console</span>.log(me.a)</div><div class="line"><span class="comment">// 你大爷</span></div></pre></td></tr></table></figure>
<p>和没有返回值一样～总结差不多就结束了</p>
<h3 id="最后说一下-apply-call-bind"><a href="#最后说一下-apply-call-bind" class="headerlink" title="最后说一下 apply, call, bind"></a>最后说一下 apply, call, bind</h3><p>这些方法会改变this指向的问题其实很明了，比如平常常用的把args转化为数组</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[].prototype.slice.call(<span class="built_in">arguments</span>)</div></pre></td></tr></table></figure>
<p>想了想还是不赘述了，that’s all， 荆轲刺秦王</p>
<h2 id="ES6-中的-箭头函数-中的this指向问题"><a href="#ES6-中的-箭头函数-中的this指向问题" class="headerlink" title="ES6 中的 箭头函数 中的this指向问题"></a>ES6 中的 箭头函数 中的this指向问题</h2><p>ES6貌似为了解决之前this变化无常的问题就通过箭头函数带来的词法作用域来消除this的问题<br>总的来说就是<strong>词法作用域的<code>this</code>特性让变量的<code>this</code>总是指向词法申明时的那个对象</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">logThisID</span> (<span class="params">id, callback</span>) </span>&#123;</div><div class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        callback(<span class="number">1</span>)</div><div class="line">        &#125;, <span class="number">0</span>)</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> person = &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'wayne'</span>,</div><div class="line">    <span class="attr">ID</span>: <span class="string">'10086'</span>,</div><div class="line">    <span class="attr">logThisName</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name) <span class="comment">// wayne</span></div><div class="line">        </div><div class="line">        logThisID(<span class="keyword">this</span>.id, (number) =&gt; &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.ID) <span class="comment">// 10086</span></div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'number = '</span> + number) <span class="comment">// 1</span></div><div class="line">            &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其实相当于是在<code>logThisName</code>里缓存了下this<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person = &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'wayne'</span>,</div><div class="line">    <span class="attr">ID</span>: <span class="string">'10086'</span>,</div><div class="line">    <span class="attr">logThisName</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> _this = <span class="keyword">this</span></div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name) <span class="comment">// wayne</span></div><div class="line">        </div><div class="line">        logThisID(<span class="keyword">this</span>.id, (number) =&gt; &#123;</div><div class="line">            <span class="built_in">console</span>.log(_this.ID) <span class="comment">// 10086</span></div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'number = '</span> + number) <span class="comment">// 1</span></div><div class="line">            &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这些都只是暂时看到，还没深入去理解，以后回来补充</p>
<p>参考：<a href="http://www.cnblogs.com/pssp/p/5216085.html" target="_blank" rel="external">追梦大大的 彻底理解js中this的指向</a></p>
<p><img src="http://7xntdk.com1.z0.glb.clouddn.com/4.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xntdk.com1.z0.glb.clouddn.com/Jasper,%20a%20humbling%20presence.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;5.28日更新，最近发现ES6的尖头函数中的this有点巧妙，不适用于以下三条规则，在后面补充下&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;开头放结论&quot;&gt;&lt;a href=&quot;#开头放结论&quot; class=&quot;headerlink&quot; title=&quot;开头放结论&quot;&gt;&lt;/a&gt;开头放结论&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;一个函数如果被调用或者执行了，那么函数中的this指向：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一般情况下指向执行时调用其的对象&lt;/li&gt;
&lt;li&gt;函数当作构造函数使用且函数内没有返回值，或返回值是5种基本型（Undefined类型、Null类型、Boolean类型、Number类型、String类型）之一，指向实例后的对象&lt;/li&gt;
&lt;li&gt;函数当作构造函数使用且有return值，返回是是数组啊、对象啊什么的，this指向返回值&lt;br&gt;接下来稍微解释下
    
    </summary>
    
      <category term="前端" scheme="http://waynecz.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://waynecz.github.io/tags/javascript/"/>
    
      <category term="this" scheme="http://waynecz.github.io/tags/this/"/>
    
  </entry>
  
  <entry>
    <title>设计的几个关键原则 (一)</title>
    <link href="http://waynecz.github.io/2016/05/05/(%E6%91%98)%20%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%87%A0%E4%B8%AA%E5%85%B3%E9%94%AE%E5%8E%9F%E5%88%99%20(%E4%B8%80)/"/>
    <id>http://waynecz.github.io/2016/05/05/(摘) 设计的几个关键原则 (一)/</id>
    <published>2016-05-05T15:53:32.000Z</published>
    <updated>2016-05-11T02:19:15.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xntdk.com1.z0.glb.clouddn.com/2.jpg" alt=""></p>
<h3 id="假设你没有足够的时间或者兴趣来专门学习设计和排版技术，但是又很想知道如何才能让页面看上去更好一些的话-看下这本书准没错！"><a href="#假设你没有足够的时间或者兴趣来专门学习设计和排版技术，但是又很想知道如何才能让页面看上去更好一些的话-看下这本书准没错！" class="headerlink" title="假设你没有足够的时间或者兴趣来专门学习设计和排版技术，但是又很想知道如何才能让页面看上去更好一些的话,  看下这本书准没错！"></a>假设你没有足够的时间或者兴趣来专门学习设计和排版技术，但是又很想知道如何才能让页面看上去更好一些的话,  看下这本书准没错！</h3><a id="more"></a>
<p><img src="http://waynecz.github.io/css/images/postimg/160505/1.png" alt=""></p>
<blockquote>
<p>上一部分大纲</p>
<ul>
<li><a href="#yxys">约书亚树</a></li>
<li><a href="#qmx">亲密性</a></li>
<li><a href="#dq">对齐</a></li>
<li><a href="#cf">重复</a></li>
<li><a href="#db">对比</a></li>
</ul>
</blockquote>
<h1 id="yxys">约书亚树</h1>

<p><strong>很奇怪为什么会有这养一个章节吧，这并不是植物书籍哦哈哈，这里讲一个小故事（以下我为书籍作者）：</strong></p>
<p>告诉你一个小故事，正是这个小故事使我意识到，能够准确陈述问题是何等重要，因为明确这些原则是掌握它们的关键。</p>
<p>很多年前的一个圣诞节，我收到一份圣诞礼物，是一本关于如何认识各种树的书。那时我住在父母的家里，所有礼物都打开后，我决定出去走走，认一认邻居家的树。出去之前我读了书的一部分。其中提到的第一种树是约书亚树，只需要两个线索就能认出它。由于约书亚树相当怪异，所以看到书中它的照片时，我对自己说：“哦，北加利福尼亚绝对没有这种树。这种树太怪异了。如果我见过，肯定应该有印象，可我以前从来没有见过。”</p>
<p><img src="http://waynecz.github.io/css/images/postimg/160505/2.png" alt="约书亚树"></p>
<p>之后我拿着这本书走出去。我的父母住在一个小巷子里，这里共有6家住户。其中4家的前院里都赫然立着约书亚树。我住在那里已经有13年了，而我此前从来没有注意过约书亚树。我在这个街区转了转，发现似乎每一家布置新居时苗圃里都有约书亚树卖，至少80％的住家前院都种有约书亚树。而我在此之前居然从来没有注意过！在我知道了这种树之后，我是说在我能够说出它的名字后，它就无处不在了。这正是我要说的：<strong>一旦能够说出什么东西的名字，就会很容易注意到它。你就会掌握它，拥有它，使它在你的控制中。</strong></p>
<p>所以，下面先来看看有哪些设计原则，知道它们的名字，然后你将逐步控制页面。</p>
<h1 id="qmx">亲密性</h1>

<h3 id="根本目的"><a href="#根本目的" class="headerlink" title="根本目的"></a>根本目的</h3><p>亲密性的根本目的是实现组织性。尽管其他原则也能达到这个目的，不过利用亲密性原则，只需简单地将相关的元素分在一组建立更近的亲密性，就能自动地实现条理性和组织性。如果信息很有条理，将更容易阅读，也更容易被记住。此外还有一个很好的“副产品”，利用亲密性原则，还可以使空白（这是设计者们最喜欢的）更美观（也更有条理）。</p>
<h3 id="如何实现"><a href="#如何实现" class="headerlink" title="如何实现"></a>如何实现</h3><p>微微眯起眼睛，统计你的眼睛停顿的次数来数一数页面上有多少个元素。如果页面上的项超过3～5个（当然，这取决于具体情况），就要看看哪些孤立的元素可以归在一组建立更近的亲密性，使之成为一个视觉单元。</p>
<h3 id="要避免的问题"><a href="#要避免的问题" class="headerlink" title="要避免的问题"></a>要避免的问题</h3><p>不要仅仅因为有空白就把元素放在角落或中央。</p>
<p>避免一个页面上有太多孤立的元素。</p>
<p>不要在元素之间留出同样大小的空白，除非各组同属于一个子集。</p>
<p>标题、子标题、图表标题、图片能否归入其相关材料？在这个问题上一定要非常清楚（哪怕只有一点含糊都要尽量避免）。在有很近亲密性的元素之间建立关系。</p>
<p>不同属一组的元素之间不要建立关系！<strong>如果元素彼此无关，要把它们分开。</strong><br><img src="http://waynecz.github.io/css/images/postimg/160505/3.png" alt="亲密测试"><br><img src="http://waynecz.github.io/css/images/postimg/160505/4.png" alt="亲密测试"></p>
<h1 id="dq">对齐</h1>

<p>任何元素都不能在页面上随意摆放。每个元素应当与页面上的另外一个元素存在某种视觉联系。</p>
<p>在设计中，统一性是一个重要的概念。要让页面上的所有元素看上去统一、有联系而且彼此相关，需要在各个单独的元素之间存在某种视觉纽带。尽管这些孤立元素在页面上的物理位置可能并不靠近，但是通过适当放置，可以让它们看上去是有联系而且相关的，并且与其他信息统一。可以看看你喜欢的那些设计。一个精美的设计不论最初看上去多么杂乱无章，总能找出其中的对齐方式。</p>
<h3 id="根本目的-1"><a href="#根本目的-1" class="headerlink" title="根本目的"></a>根本目的</h3><p>对齐的根本目的是使页面统一而且有条理。其效果类似于把客厅里四处零落的洋娃娃捡起来，并把它们放在一个玩具箱中。</p>
<p>不论创建精美的、正式的、有趣的还是严肃的外观，通常都可以利用一种明确的对齐（当然，要结合适当的字体）来达到目的。</p>
<h3 id="如何实现-1"><a href="#如何实现-1" class="headerlink" title="如何实现"></a>如何实现</h3><p>要特别注意元素放在哪里。应当总能在页面上找出与之对齐的元素，尽管这两个对象的物理位置可能相距很远。</p>
<h3 id="要避免的问题-1"><a href="#要避免的问题-1" class="headerlink" title="要避免的问题"></a>要避免的问题</h3><p><strong>要避免在页面上混合使用多种文本对齐方式</strong>（也就是说，不要将某些文本居中，而另外一些文本右对齐）。</p>
<p>另外，<strong>要着力避免居中对齐</strong>，除非你有意识地想要创建一种比较正式、稳重（通常也更乏味）的表示。并不是完全杜绝使用居中对齐，有时可以有意地选择这种对齐方式，但是不要把它做为默认选择。<br><img src="http://waynecz.github.io/css/images/postimg/160505/5.png" alt="对齐测试"><br><img src="http://waynecz.github.io/css/images/postimg/160505/6.png" alt="对齐测试"></p>
<h1 id="cf">重复</h1>

<p>设计中视觉元素的重复可以将作品中的各部分连在一起，从而统一并增强整个作品，否则这些部分只是彼此孤立的单元。重复不仅对只有一页的作品很有用，对于多页文档的设计更显重要（对此我们通常称之为保持一致）。</p>
<h3 id="根本目的-2"><a href="#根本目的-2" class="headerlink" title="根本目的"></a>根本目的</h3><p><strong>重复的目的就是统一，并增强视觉效果。</strong>不要低估页面视觉效果的威力，如果一个作品看起来很有趣，它往往也更易于阅读。</p>
<h3 id="如何实现-2"><a href="#如何实现-2" class="headerlink" title="如何实现"></a>如何实现</h3><p><strong>重复可以认为是保持一致性</strong>，而且我相信你早已经这样做过。现在，需要把现有的一致性更向前推进一步。可不可以专门做一个图片设计，并且将某些一致元素（如标题）作为这个图片设计的一部分？在每个页面底部或每个标题下面使用一条粗细为1点的线吗？或者是不是使用一条更粗的线（4点），使重复元素显得更明显，更生动？</p>
<p>再看看有没有可能增加一些纯粹为建立重复而设计的元素。是不是有一个编号项列表？可不可以使用另外一种字体或逆序数字，然后对出版物中的每一个编号列表都重复同样的处理？最初，可以只是找出现有的重复，然后将其加强。熟悉了这种思想之后，再开始创建新的重复元素，来增强设计的效果并提高信息的清晰度。</p>
<p>重复就像是强调你的衣着。如果一位女士穿着一件可爱的黑色晚礼服，戴着一顶别致的帽子，她可能会用红色高跟鞋、红色口红和一朵红色小花来突出她的晚礼服。</p>
<h3 id="要避免的问题-2"><a href="#要避免的问题-2" class="headerlink" title="要避免的问题"></a>要避免的问题</h3><p><strong>要避免太多地重复一个元素</strong>，重复太多会让人讨厌。要注意对比的价值（请看下一章以及有关字体对比的章节）。</p>
<p>例如，如果这位女士想穿黑色晚礼服，配红帽子、红耳环、红口红、红色手提包、红鞋和一件红上衣，重复就太滥了，现在的对比不再有统一的效果，感觉上也让人不太舒服，太多的重复将混淆重点。<br><img src="http://waynecz.github.io/css/images/postimg/160505/7.png" alt="重复测试"><br><img src="http://waynecz.github.io/css/images/postimg/160505/8.png" alt="重复测试"><br><img src="http://waynecz.github.io/css/images/postimg/160505/9.png" alt="重复测试"></p>
<h1 id="db">对比</h1>

<p>在页面上增加对比能吸引人的眼球。我们的眼睛喜欢看到对比的事物。如果页面上放两个不完全相同的元素（比如有两种不同字体，或者有两种不同线宽），它们就不能类似。要实现有效的对比，这两个元素必须截然不同。</p>
<p>对比就像需要修补一处漆记时配漆一样，不能大概地配色，颜色要么配得完全相同，要么就得把整面墙都重漆一遍。我的祖父（酷爱掷蹄铁游戏）总是说，“只有在掷蹄铁和手榴弹游戏中‘几乎击中’才算赢。”（在其他方面，仅仅“几乎达到”是不算数的。）</p>
<h3 id="根本目的-3"><a href="#根本目的-3" class="headerlink" title="根本目的"></a>根本目的</h3><p>对比的根本目的有两方面，这两个方面相辅相成，无法分开。一个目的是增强页面的效果，如果一个页面看起来很有意思，往往更有可读性。另一个目的是有助于信息的组织。读者应当能立即了解信息以何种方式组织，以及从一项到另一项的逻辑流程。对比元素不能让读者混淆，也不能错误地强调重点（即本不该是重点的元素）。</p>
<h3 id="如何实现-3"><a href="#如何实现-3" class="headerlink" title="如何实现"></a>如何实现</h3><p>可以通过字体选择（见下一部分）、线宽、颜色、形状、大小、空间等等来增加对比。增加对比很容易，途径有很多，这可能是增加视觉效果最有意思也最让人满意的方法了。重要的是：<strong>对比一定要强烈。</strong></p>
<h3 id="要避免的问题-3"><a href="#要避免的问题-3" class="headerlink" title="要避免的问题"></a>要避免的问题</h3><p>不要犹豫。如果你想形成对比，就加大力度。不要将一种粗线与一种更粗的线进行对比。不要将棕色文本与黑色标题建立对比。要避免使用两种或多种类似的字体。<strong>如果各个项不完全一样，干脆让它们截然不同！</strong></p>
<p><img src="http://waynecz.github.io/css/images/postimg/160505/10.png" alt="对比测试"><br><img src="http://waynecz.github.io/css/images/postimg/160505/11.png" alt="对比测试"></p>
<p><img src="http://waynecz.github.io/css/images/postimg/160505/12.png" alt="对比测试"><br><img src="http://waynecz.github.io/css/images/postimg/160505/13.png" alt="对比测试"><br><img src="http://waynecz.github.io/css/images/postimg/160505/14.png" alt="对比测试"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xntdk.com1.z0.glb.clouddn.com/2.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;假设你没有足够的时间或者兴趣来专门学习设计和排版技术，但是又很想知道如何才能让页面看上去更好一些的话-看下这本书准没错！&quot;&gt;&lt;a href=&quot;#假设你没有足够的时间或者兴趣来专门学习设计和排版技术，但是又很想知道如何才能让页面看上去更好一些的话-看下这本书准没错！&quot; class=&quot;headerlink&quot; title=&quot;假设你没有足够的时间或者兴趣来专门学习设计和排版技术，但是又很想知道如何才能让页面看上去更好一些的话,  看下这本书准没错！&quot;&gt;&lt;/a&gt;假设你没有足够的时间或者兴趣来专门学习设计和排版技术，但是又很想知道如何才能让页面看上去更好一些的话,  看下这本书准没错！&lt;/h3&gt;
    
    </summary>
    
      <category term="设计" scheme="http://waynecz.github.io/categories/%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="design" scheme="http://waynecz.github.io/tags/design/"/>
    
  </entry>
  
  <entry>
    <title>CSS3 animation 动画的流程的简单控制</title>
    <link href="http://waynecz.github.io/2016/04/24/CSS3%20animation%20%E5%8A%A8%E7%94%BB%E7%9A%84%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
    <id>http://waynecz.github.io/2016/04/24/CSS3 animation 动画的流程控制/</id>
    <published>2016-04-24T15:53:53.000Z</published>
    <updated>2016-05-27T08:55:50.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xntdk.com1.z0.glb.clouddn.com/1.jpg" alt=""> </p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>好吧。。。并没有前言，直接进入正题。CSS3的<code>animation</code>是一个好东西，让页面动画更加<strong>纯净</strong>，但是之前一扯到动画流程的控制（比如执行完第一个动画后再执行第二个动画在执行某个动作）就有点懵逼<img src="http://waynecz.github.io/css/images/postimg/160424/1.png" style="display:inline-block"></p>
<a id="more"></a>
<p>如果是jQuery动画呢，有回调函数（或者.promise().done()），方便滴狠呐！但是<code>animation</code> 呢。。呢。。。呢。。。。呢。。。。。呢。。。。。。</p>
<p>粗粗的想一想吧，貌似给元素加上第一个动画的类后根据第一个动画的执行时间来设置个延迟再加入第二个动画的类也是可以实现的，但是总觉得这样不干净，而且setTimeout其实也不是那么的可控，</p>
<p>然后塔哒，就遇到这篇文章<a href="http://blog.jobbole.com/51889/" target="_blank" rel="external">你若触发，我就处理</a>，讲的是JS事件响应的，对， <strong>事！件！响！应！</strong>。如果动画结束时能有能触发某个事件，JS再监听响应一下，这不就完事儿了吗？</p>
<p>诶，万能的JS还真有<img src="http://waynecz.github.io/css/images/postimg/160424/2.png" style="display:inline-block"></p>
<h3 id="CSS动画事件-animationstart，animationend和animationiteration"><a href="#CSS动画事件-animationstart，animationend和animationiteration" class="headerlink" title="CSS动画事件 animationstart，animationend和animationiteration"></a>CSS动画事件 animationstart，animationend和animationiteration</h3><p>看着三个事件名字就知道，这三个事件分别对应动画开始前，动画结束后，动画进行中，不废话了，直接上个<a href="https://jsfiddle.net/waynecz/fd8yz8bh/" target="_blank" rel="external">demo</a></p>
<p>实现了个简单的删除动画，第一步让元素出视野，第二步让元素<code>height</code>和<code>margin,paddind</code>等都塌陷，最后直接移除元素</p>
<iframe width="100%" height="500" src="//jsfiddle.net/waynecz/fd8yz8bh/15/embedded/js,html,css,result/dark/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p>有几个自己觉得要注意写下注释<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">on(<span class="string">'.m1'</span>, <span class="string">'animationend'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// this.classList获取的是一个DOMtokenList并不是真的数组所以要转换一下</span></div><div class="line">  <span class="keyword">var</span> classlist = <span class="built_in">Array</span>.prototype.slice.apply(<span class="keyword">this</span>.classList);</div><div class="line">  <span class="comment">// 因为有两个动画，所以要判定是哪一个动画结束了来执行下一阶段</span></div><div class="line">  <span class="keyword">if</span> (classlist.indexOf(<span class="string">'dnone'</span>) == <span class="number">-1</span>) &#123;</div><div class="line">    <span class="keyword">this</span>.classList.add(<span class="string">'dnone'</span>)</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">this</span>.parentNode.removeChild(<span class="keyword">this</span>)</div><div class="line">    &#125;, <span class="number">1000</span>)</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">on(<span class="string">'button'</span>, <span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  select(<span class="string">'.m1'</span>).classList.toggle(<span class="string">'leave'</span>);</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">select</span>(<span class="params">selector</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">document</span>.querySelector(selector)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">on</span>(<span class="params">selector, eventName, cb</span>) </span>&#123;</div><div class="line">  select(selector).addEventListener(eventName, cb);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这么一看其实也是很简单的哈哈,顺带一提起时<code>transition</code>过渡动画也有个事件<code>transitionend</code>。</p>
<h3 id="最后，兼容性"><a href="#最后，兼容性" class="headerlink" title="最后，兼容性"></a>最后，兼容性</h3><ol>
<li>CSS3动画相关属性的兼容性可以看<a href="http://waynecz.github.io/2016/02/01/CSS%E5%8A%A8%E7%94%BB%E4%BC%98%E9%9B%85%E9%99%8D%E7%BA%A7%E7%9A%84%E7%AE%80%E5%8D%95%E6%80%BB%E7%BB%93/">这里</a></li>
<li><code>animation</code>事件，一般只需加两种前缀就可以了<br>webkit前缀：webkitAnimationStart<br>MS前缀：MSAnimationStart   </li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.prototype.perfixOn = <span class="function"><span class="keyword">function</span> (<span class="params">eventName, cb</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> perfix = [<span class="string">'webkit'</span>, <span class="string">'MS'</span>, <span class="string">''</span>]</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> i = perfix.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">		<span class="keyword">if</span> (perfix[i] != <span class="string">''</span>) &#123;</div><div class="line">            eventName.replace(<span class="regexp">/^(\w)/</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$<span class="number">1</span></span>) </span>&#123;</div><div class="line">                <span class="keyword">return</span> $<span class="number">1.</span>toUpperCase()</div><div class="line">            &#125;)</div><div class="line">        &#125;</div><div class="line">		<span class="keyword">this</span>.addEventListener(perfix[i] + eventName, cb, <span class="literal">false</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">Obj.perfixOn(<span class="string">'animationend'</span>, cb)</div></pre></td></tr></table></figure>
<p><img src="http://7xntdk.com1.z0.glb.clouddn.com/2.jpg" alt=""> </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xntdk.com1.z0.glb.clouddn.com/1.jpg&quot; alt=&quot;&quot;&gt; &lt;/p&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;好吧。。。并没有前言，直接进入正题。CSS3的&lt;code&gt;animation&lt;/code&gt;是一个好东西，让页面动画更加&lt;strong&gt;纯净&lt;/strong&gt;，但是之前一扯到动画流程的控制（比如执行完第一个动画后再执行第二个动画在执行某个动作）就有点懵逼&lt;img src=&quot;http://waynecz.github.io/css/images/postimg/160424/1.png&quot; style=&quot;display:inline-block&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://waynecz.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://waynecz.github.io/tags/javascript/"/>
    
      <category term="css3" scheme="http://waynecz.github.io/tags/css3/"/>
    
  </entry>
  
  <entry>
    <title>express＋webpack+gulp＋nodemon初级自动化！</title>
    <link href="http://waynecz.github.io/2016/04/11/express%EF%BC%8Bwebpack-gulp%EF%BC%8Bnodemon%E5%89%8D%E7%AB%AF%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    <id>http://waynecz.github.io/2016/04/11/express＋webpack-gulp＋nodemon前端自动化/</id>
    <published>2016-04-11T13:26:37.000Z</published>
    <updated>2016-04-21T05:12:50.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xntdk.com1.z0.glb.clouddn.com/11.jpg" alt=""></p>
<p>主要是为了彻底解放刷新键。。。。。咳咳。开始<br>之前接触React时解除了webpack，不过后来看angular和其他事就搁置了。最近碰到Vue时，体验了下<a href="http://cn.vuejs.org/guide/application.html" target="_blank" rel="external">vue-cli 脚手架</a>构建的项目，只能说，<em>哇！！</em> 好爽。。什么热加载，保存时检查代码，单元测试以及一堆我还不知道的但是很强大的功能！无比顺畅<br><a id="more"></a><br>虽然之前在用的 <code>Gulp</code>(盖欧破)加上各种插件貌似也能达到差不多的效果，但是还是心痒，所以这几天笨手笨脚地学者搭了<a href="https://github.com/waynecz/Thrones" target="_blank" rel="external">这个</a>, 一个OA的demo。</p>
<p>开始，主要用到：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// web框架 前端模版</span></div><div class="line">express + art-template</div><div class="line"><span class="comment">// 自动化构建 打包(sass)</span></div><div class="line">gulp + webpack +</div><div class="line"><span class="comment">// 浏览器刷新 node重启 热加载</span></div><div class="line">browser-sync + nodemon + webpack-hot-middleware</div></pre></td></tr></table></figure></p>
<p>然后新建项目，这里用express应用生成器,具体可以看<a href="http://www.expressjs.com.cn/starter/generator.html" target="_blank" rel="external">这里</a></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 可能要求权限，所以sudo，这里还要感谢淘宝</span></div><div class="line">sudo cnpm install express-generator -g </div><div class="line"><span class="comment">//express + 项目名</span></div><div class="line">express myapp</div><div class="line"><span class="comment">//然后一路回车，塔哒，然后就好了</span></div></pre></td></tr></table></figure>
<p>生成的项目模版引擎默认用的<code>jade</code>,前几天突然发现了国人的一款引擎<code>art-template</code>,性能强劲，语法干净，express亲和力又强，这次就用上了！<a href="http://aui.github.io/artTemplate/" target="_blank" rel="external">贴上地址</a>.</p>
<p>首先项目目录请看<a href="https://github.com/waynecz/Thrones" target="_blank" rel="external">这里</a>，然后是webpack的配置，webpack的入门看<a href="http://zhuanlan.zhihu.com/p/20367175?columnSlug=FrontendMagazine" target="_blank" rel="external">这里</a>,先这样简单配置webpack.config.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> path         = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"><span class="keyword">var</span> autoprefixer = <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>);</div><div class="line"><span class="keyword">var</span> webpack      = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line"></div><div class="line"><span class="comment">//一些文件夹的路径</span></div><div class="line"><span class="keyword">var</span> ROOT_PATH  = path.resolve(__dirname);</div><div class="line"><span class="keyword">var</span> SRC_PATH   = path.resolve(ROOT_PATH, <span class="string">'src'</span>);</div><div class="line"><span class="keyword">var</span> MODULE_PATH = path.resolve(ROOT_PATH, <span class="string">'./node_modules'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = </div><div class="line">	<span class="comment">// context webpack处理entry选项时的基础路径</span></div><div class="line">    context: path.join(__dirname, <span class="string">'public'</span>),</div><div class="line">    <span class="attr">entry</span>  : [</div><div class="line">    	<span class="comment">// 会寻找src目录下的index.js</span></div><div class="line">        <span class="string">'../src'</span></div><div class="line">        ],</div><div class="line">    <span class="attr">output</span> : &#123;</div><div class="line">        <span class="attr">path</span>      : <span class="string">'/'</span>,</div><div class="line">        <span class="attr">filename</span>  : <span class="string">'bundle.js'</span>,</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">module</span> : &#123;</div><div class="line">        <span class="attr">loaders</span>: [</div><div class="line">            &#123;</div><div class="line">                <span class="attr">test</span>   : <span class="regexp">/\.scss$/</span>,</div><div class="line">                <span class="comment">// CSS预处理器们</span></div><div class="line">                loaders: [<span class="string">'style'</span>, <span class="string">'css'</span>, <span class="string">'postcss'</span>, <span class="string">'sass'</span>],</div><div class="line">                <span class="attr">include</span>: SRC_PATH</div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 选择postcss生效的插件</span></div><div class="line">    postcss: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> [autoprefixer];</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">resolve</span>: &#123;</div><div class="line">      <span class="attr">alias</span>: &#123;</div><div class="line">      	  <span class="comment">// 为了全局依赖jQuery定义的地址缩写</span></div><div class="line">          jquery: <span class="string">"../node_modules/jquery/dist/jquery.min"</span></div><div class="line">      &#125;  </div><div class="line">    &#125;,</div><div class="line">    <span class="attr">plugins</span>: [</div><div class="line">        <span class="comment">// 全局依赖jQuery</span></div><div class="line">        <span class="keyword">new</span> webpack.ProvidePlugin(&#123;</div><div class="line">            <span class="attr">$</span>: <span class="string">"jquery"</span>,</div><div class="line">            <span class="attr">jQuery</span>: <span class="string">"jquery"</span></div><div class="line">        &#125;)</div><div class="line">    ]</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>现在基本功能就是css和js打包啦，接下来加进重点，也就是热加载功能。只要你修改了webpack打包的文件，webpack会在不刷新浏览器的情况下替换掉原来的文件,无比顺畅，这里有篇<a href="http://andrewhfarmer.com/webpack-hmr-tutorial/" target="_blank" rel="external">文章</a>非常非常推荐，里面很清晰的讲了webpack在各种情况下<code>热加载</code>的实现。进入正题，首先亮出webpack配合express的兵刃:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 热加载中间件</span></div><div class="line">npm install webpack-hot-middleware --save-dev</div><div class="line"><span class="comment">// 这个没怎么理解，感觉是生成一个虚拟的环境用来存放打包文件</span></div><div class="line">npm install webpack-dev-middleware --save-dev</div><div class="line"><span class="string">`</span></div></pre></td></tr></table></figure></p>
<p>接接下来，修改<code>webpack.config.js</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 修改entry,output和plugins</span></div><div class="line">......</div><div class="line">entry  : [</div><div class="line">	<span class="comment">// 自己暂时理解为热加载文件存放的虚拟地址，请指正</span></div><div class="line">	<span class="string">'webpack-hot-middleware/client?path=/__webpack_hmr&amp;timeout=20000'</span>,</div><div class="line">	<span class="string">'../src'</span></div><div class="line">],</div><div class="line"><span class="attr">output</span> : &#123;</div><div class="line">    <span class="attr">path</span>      : <span class="string">'/'</span>,</div><div class="line">    <span class="attr">filename</span>  : <span class="string">'bundle.js'</span>,</div><div class="line">    <span class="comment">// 加入publicPath</span></div><div class="line">    publicPath: <span class="string">'/javascripts'</span></div><div class="line">&#125;,</div><div class="line">.....</div><div class="line">plugins: [</div><div class="line">	<span class="comment">// 添加下面三行</span></div><div class="line">    <span class="keyword">new</span> webpack.optimize.OccurenceOrderPlugin(),</div><div class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin(),</div><div class="line">    <span class="keyword">new</span> webpack.NoErrorsPlugin(),</div><div class="line">    </div><div class="line">    <span class="keyword">new</span> webpack.ProvidePlugin(&#123;</div><div class="line">        <span class="attr">$</span>: <span class="string">"jquery"</span>,</div><div class="line">        <span class="attr">jQuery</span>: <span class="string">"jquery"</span></div><div class="line">    &#125;)</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>webpack配置暂时到这，然后进express的配置，这里我的是<code>app.js</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 加入下面这些，有个奇怪的表现，我吧下面这些代码放在整个文件的位置不同会导致</span></div><div class="line"><span class="comment">// 功能失效，最后我放在了文件的头部。。</span></div><div class="line"><span class="keyword">var</span> webpackDevMiddleware = <span class="built_in">require</span>(<span class="string">"webpack-dev-middleware"</span>);</div><div class="line"><span class="keyword">var</span> webpackHotMiddleware = <span class="built_in">require</span>(<span class="string">"webpack-hot-middleware"</span>);</div><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line"><span class="keyword">var</span> webpackConfig = <span class="built_in">require</span>(<span class="string">'./webpack.config.js'</span>);</div><div class="line"><span class="keyword">var</span> compiler = webpack(webpackConfig);</div><div class="line"></div><div class="line">app.use(webpackDevMiddleware(compiler, &#123;</div><div class="line">    <span class="attr">hot</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">filename</span>: <span class="string">'bundle.js'</span>,</div><div class="line">    <span class="comment">// 这个publicPath就是webpack里output里的那个，自己理解为dev环境下存放打包后文件的路径</span></div><div class="line">    publicPath: webpackConfig.output.publicPath,</div><div class="line">    <span class="attr">stats</span>: &#123;</div><div class="line">        <span class="attr">colors</span>: <span class="literal">true</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">historyApiFallback</span>: <span class="literal">true</span></div><div class="line">&#125;));</div><div class="line"></div><div class="line">app.use(webpackHotMiddleware(compiler, &#123;</div><div class="line">    <span class="attr">log</span>: <span class="built_in">console</span>.log,</div><div class="line">    <span class="comment">// 这个path对应entry里的path</span></div><div class="line">    path: <span class="string">'/__webpack_hmr'</span>,</div><div class="line">    <span class="attr">heartbeat</span>: <span class="number">10</span> * <span class="number">1000</span>,</div><div class="line">&#125;));</div></pre></td></tr></table></figure></p>
<p>最后在前端里引入打包文件，这样：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 其实可以看到前面webpack的context配置为 /public --&gt;</span></div><div class="line"><span class="comment">&lt;!-- 然后 output 的 publicPath 设置为 /javascripts --&gt;</span></div><div class="line"><span class="comment">&lt;!-- 所以 最后引用的地址为 (public/) javascripts/bundle.js --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"javascripts/bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>塔哒，到这基本就粗略的实现了express加webpack的<em>打包文件!!</em>热加载，对，只有打包的文件，对于其他文件，比如<code>node的后端代码</code>和<em>这里的artTemplate应用在node中默认是建立缓存的，所以直接修改模版文件必须要重启下服务然后刷新浏览器才能做到视图更新，当然也可以关掉缓存这个功能</em></p>
<p>其实说白了就是监听这些文档的变化然后重启服务并刷新浏览器！！<br>分成两部可能更清晰点</p>
<ul>
<li>监听并重启服务</li>
<li>在服务重启完成后刷新浏览器</li>
</ul>
<p>这里要注意的其实就是重启服务需要点时间，看具体依赖情况，我这里大概需要1秒，所以刷新浏览器需要有个延迟，在服务完全重启完毕后再执行</p>
<p>先上依靠<br><figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">npm install gulp --<span class="built_in">save</span>-<span class="built_in">dev</span></div><div class="line">npm install gulp-nodemon --<span class="built_in">save</span>-<span class="built_in">dev</span></div><div class="line"><span class="comment">// browser-sync很有趣的，会代理起一个服务器，本身也拥有热加载功能(原理好像也是webpack？）</span></div><div class="line"><span class="comment">// 这里主要用来监听文件变化延迟刷新浏览器。</span></div><div class="line">npm install browser-sync --<span class="built_in">save</span>-<span class="built_in">dev</span></div></pre></td></tr></table></figure></p>
<p>配置<code>gulpfile.js</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"><span class="keyword">var</span> nodemon = <span class="built_in">require</span>(<span class="string">'gulp-nodemon'</span>);</div><div class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"><span class="keyword">var</span> bs = <span class="built_in">require</span>(<span class="string">'browser-sync'</span>).create();</div><div class="line"></div><div class="line"><span class="keyword">var</span> ROOT = path.resolve(__dirname);</div><div class="line"><span class="keyword">var</span> APP = path.resolve(ROOT, <span class="string">'app.js'</span>);</div><div class="line"><span class="keyword">var</span> ROUTERS = path.resolve(ROOT, <span class="string">'routes'</span>);</div><div class="line"><span class="keyword">var</span> VIEW =  path.resolve(ROOT, <span class="string">'views'</span>);</div><div class="line"></div><div class="line"><span class="comment">// browser-sync配置，配置里启动nodemon任务</span></div><div class="line">gulp.task(<span class="string">'browser-sync'</span>, [<span class="string">'nodemon'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    bs.init(<span class="literal">null</span>, &#123;</div><div class="line">    	<span class="comment">// 这里因为express默认起的是3000端口，所以代理3000端口到4000，随自己改</span></div><div class="line">        proxy: <span class="string">"http://localhost:3000"</span>,</div><div class="line">        <span class="attr">port</span>: <span class="number">4000</span></div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// browser-sync 监听文件</span></div><div class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'browser-sync'</span>], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.watch([<span class="string">'./routes/**/*.js'</span>,<span class="string">'./modules/*'</span>,<span class="string">'./database/*'</span>, <span class="string">'./app.js'</span>, <span class="string">'./bin/www'</span>,<span class="string">'./views/**/*.html'</span>], [<span class="string">'bs-delay'</span>]);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 延时刷新</span></div><div class="line">gulp.task(<span class="string">'bs-delay'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        bs.reload();</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'重启完毕!'</span>);</div><div class="line">    &#125;, <span class="number">2000</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'nodemon'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">cb</span>) </span>&#123;</div><div class="line">	<span class="comment">// 设个变量来防止重复重启</span></div><div class="line">    <span class="keyword">var</span> started = <span class="literal">false</span>;</div><div class="line">    nodemon(&#123;</div><div class="line">        <span class="attr">script</span>: <span class="string">'./bin/www'</span>,</div><div class="line">        <span class="comment">// 监听文件的后缀</span></div><div class="line">        ext: <span class="string">"js html"</span>,                </div><div class="line">        <span class="attr">env</span>: &#123; <span class="string">'NODE_ENV'</span>: <span class="string">'development'</span> &#125;,</div><div class="line">        <span class="comment">// 监听的路径</span></div><div class="line">        watch: [</div><div class="line">            ROUTERS,</div><div class="line">            APP,</div><div class="line">            VIEW</div><div class="line">        ]        </div><div class="line">    &#125;).on(<span class="string">'start'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!started) &#123;</div><div class="line">            cb();</div><div class="line">            started = <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>这里可以看到，nodemon监听的文件一旦有变动后就会重启node，与此同时，其实BS也监听着这些后端文件包括artTemplate模版文件，所以一旦有改动这里再2秒后刷新浏览器。到这里差不多就可以完全解放刷新键了！</p>
<p>真实的体验效果么也还行，偶尔会抽风，还在继续改进。最后</p>
<p>收工！梅干菜丝瓜蛋汤！</p>
<p><img src="http://ali.xinshipu.cn/20130319/original/1363661582619.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xntdk.com1.z0.glb.clouddn.com/11.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;主要是为了彻底解放刷新键。。。。。咳咳。开始&lt;br&gt;之前接触React时解除了webpack，不过后来看angular和其他事就搁置了。最近碰到Vue时，体验了下&lt;a href=&quot;http://cn.vuejs.org/guide/application.html&quot;&gt;vue-cli 脚手架&lt;/a&gt;构建的项目，只能说，&lt;em&gt;哇！！&lt;/em&gt; 好爽。。什么热加载，保存时检查代码，单元测试以及一堆我还不知道的但是很强大的功能！无比顺畅&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://waynecz.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="自动化构建" scheme="http://waynecz.github.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>(转)思考产品需求6步法</title>
    <link href="http://waynecz.github.io/2016/04/06/%E6%80%9D%E8%80%83%E4%BA%A7%E5%93%81%E9%9C%80%E6%B1%826%E6%AD%A5%E6%B3%95/"/>
    <id>http://waynecz.github.io/2016/04/06/思考产品需求6步法/</id>
    <published>2016-04-06T11:12:28.000Z</published>
    <updated>2016-05-30T06:35:24.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xntdk.com1.z0.glb.clouddn.com/5.jpg" alt=""></p>
<blockquote>
<p>Form 沈晓马</p>
</blockquote>
<p>产品工作中总能碰到很多困惑，因而有了些许执念，为了放下，为了走得更远，我选择写字。</p>
<p>每天都能接到很多产品需求，有人直接到工位上提需求，有人通过微信提需求，有人通过QQ提需求，有人通过邮件提需求，还有人在卫生间里跟我提需求。</p>
<a id="more"></a>
<p>如何判断一个需求从左耳进，然后是右耳出还是留在右耳里，一定会有一层「过滤网」，而这「过滤网」其实就是思考问题的方法论。下面整理的思考六步法其实就是六层过滤网，每经过一层，筛选掉一些，能通过第六层的，基本就能判断是个好需求了。</p>
<h2 id="1-需求来自哪里？"><a href="#1-需求来自哪里？" class="headerlink" title="1. 需求来自哪里？"></a>1. 需求来自哪里？</h2><p>很多人会直接告诉你，我们要做这个功能。这个时候就要很敏感地问一句：「谁提的需求？」这个需求可能来自市场，可能来自业务方，可能来自开发，可能来自高层。不同工作方向的人会提不同的需求，知道他们是谁就能了解他们为什么要提这个需求，有些人是站在自己角度提的需求，有些人是站在用户角度提的需求，不一样，要分辨清楚。 </p>
<h2 id="2-需求提出者是否是目标用户？"><a href="#2-需求提出者是否是目标用户？" class="headerlink" title="2. 需求提出者是否是目标用户？"></a>2. 需求提出者是否是目标用户？</h2><p>你经常能听到这样的话：「如果是我，我肯定会用这个功能！」「这个功能，用户肯定会喜欢的啊！」或者是看用户反馈，用户要这个功能，要那个功能。这个时候不要被别人的言语忽悠，要想一想，提需求的人是不是我们的目标用户。比如在线叫外卖的软件，如果提需求的人是个几乎不点外卖、喜欢堂食的人，这种类型的用户提的需求就要当心了，别被带到沟里去。</p>
<h2 id="3-多少用户有这个需求？"><a href="#3-多少用户有这个需求？" class="headerlink" title="3. 多少用户有这个需求？"></a>3. 多少用户有这个需求？</h2><p>每次产品迭代，开发资源永远不够用，我们要优先解决大部分用户的痛点需求，小部分用户的需求可以暂时放一放。解决了大部分用户的需求，就会让大部分用户用的爽，继而能黏住大部分的用户。用户即流量。</p>
<h2 id="4-需求是否紧急？"><a href="#4-需求是否紧急？" class="headerlink" title="4. 需求是否紧急？"></a>4. 需求是否紧急？</h2><p>接下来我们需要看这个产品需求是否非常紧急，这种状况下经常会出现PK，大家都觉得自己的需求很紧急，但是作为产品经理自身一定要放眼全局，衡量一下到底哪个需求更紧急。比如有些需求如果做了可以让公司每天少损失100万，晚做几天就会有几百万流失，那这个需求的优先级肯定得排在前面。</p>
<h2 id="5-产品方案能否解决用户的需求？"><a href="#5-产品方案能否解决用户的需求？" class="headerlink" title="5. 产品方案能否解决用户的需求？"></a>5. 产品方案能否解决用户的需求？</h2><p>用户的需求有很多，但是分析下来发现，并不是每个需求都可以通过产品功能来解决的，有些需要其他方的配合才能完成，或者是即便做了这个功能，也只是表面功夫，并没有实际解决掉用户的问题，那么这些其实都是需要去思考的。</p>
<h2 id="6-如何证明自己的产品方案是对的？"><a href="#6-如何证明自己的产品方案是对的？" class="headerlink" title="6. 如何证明自己的产品方案是对的？"></a>6. 如何证明自己的产品方案是对的？</h2><p>最后，是要分析一下如何才能证明自己的解决方案是对的，如果只是自己觉得这样改功能会很好，但是上线后也没法验证，那其实意义是不大的。比如原本注册流程是三个页面，分别是手机号-验证码-密码，如果为了提高注册转化率，把设置密码这个页面（流程）去掉，那么上线后就要看，注册转化率是否提升了，是否达到自己最初的目标了。比如评论功能，我们希望通过功能的改进能让用户写出更多高质量的评论，那么上线后就要看评论的字数有没有提高，点评率有没有上升，等等。可以通过数据，也可以通过用户反馈去判断一个新上线功能的好坏。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xntdk.com1.z0.glb.clouddn.com/5.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Form 沈晓马&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;产品工作中总能碰到很多困惑，因而有了些许执念，为了放下，为了走得更远，我选择写字。&lt;/p&gt;
&lt;p&gt;每天都能接到很多产品需求，有人直接到工位上提需求，有人通过微信提需求，有人通过QQ提需求，有人通过邮件提需求，还有人在卫生间里跟我提需求。&lt;/p&gt;
    
    </summary>
    
      <category term="产品" scheme="http://waynecz.github.io/categories/%E4%BA%A7%E5%93%81/"/>
    
    
      <category term="需求" scheme="http://waynecz.github.io/tags/%E9%9C%80%E6%B1%82/"/>
    
  </entry>
  
  <entry>
    <title>流程控制： jQ Deferred 与 ES6 Promise 使用新手向入坑！</title>
    <link href="http://waynecz.github.io/2016/03/25/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%EF%BC%9A%20jQ%20Deffered%20%E4%B8%8E%20ES6%20Promise%20%E4%BD%BF%E7%94%A8%E5%85%A5%E5%9D%91%EF%BC%81/"/>
    <id>http://waynecz.github.io/2016/03/25/流程控制： jQ Deffered 与 ES6 Promise 使用入坑！/</id>
    <published>2016-03-25T15:35:42.000Z</published>
    <updated>2016-05-12T15:30:55.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xntdk.com1.z0.glb.clouddn.com/12.jpg" alt=""></p>
<p>在<a href="https://segmentfault.com/a/1190000005072394" target="_blank" rel="external">SF</a>由n͛i͛g͛h͛t͛i͛r͛e͛大大指出关于Promise中catch用的不到位的错误。贴上大大推荐的文章<a href="https://pouchdb.com/2015/05/18/we-have-a-problem-with-promises.html" target="_blank" rel="external">Promise中的菜鸟和高阶错误</a>，文章很详细说明了一些Promise使用中的错误和指导。另外更正内容在后面补充。</p>
<h2 id="从-jQuery-Deferred-开始"><a href="#从-jQuery-Deferred-开始" class="headerlink" title="从 jQuery $.Deferred() 开始"></a>从 jQuery $.Deferred() 开始</h2><p>说到异步流程控制，之前用的比较多的是jQ的Deferred。那Deferred是个啥呢，不清楚没关系，直接控制台来打印看下：</p>
<p><img src="http://waynecz.github.io/css/images/postimg/160325/1.png" alt=""><br><a id="more"></a><br>喔！看得出$.Deferred()后是个对象，其<em>下面</em>有着熟悉的<code>done</code>, <code>fail</code>, <code>always</code>字眼（对，，是不是有点熟悉了呢？没错！如果经常用ajax的话就会经常接触到这些货色）。 当然了，不止这些，还有最最最重要的<code>reject</code>和<code>resolve</code>方法，说到这两个方法，就得引出下Deferred的状态机制了——其实很简单，实例化后用上图中的<code>state</code>方法就可以查看(<code>$.Deferred().state()</code>),有三种状态</p>
<ul>
<li>执行resolve/reject前，返回值是pending</li>
<li>执行了resolve，返回值是resolved</li>
<li>执行了reject，返回值是rejected</li>
</ul>
<p>直接来试着用下吧！这里我们假设执行一个随机延时的<code>setTimeout</code>的异步操作，<strong>在<code>setTimeout</code>异步操作结束后</strong>，根据延时大小，做出不同回应 ! 代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span> (<span class="params">msg</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(msg);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 申明个异步操作</span></div><div class="line"><span class="keyword">var</span> Async = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="comment">// 生成一个0到5秒的延迟</span></div><div class="line">	<span class="keyword">var</span> delay = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">5</span>);</div><div class="line">	<span class="comment">// 创建一个Deffered对象</span></div><div class="line">	<span class="keyword">var</span> dfd = $.Deferred();</div><div class="line">	<span class="comment">// 这里调用一个异步操作</span></div><div class="line">	setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">if</span> (delay &lt;= <span class="number">2</span>) &#123;</div><div class="line">			<span class="comment">// 置dfd状态为resolved</span></div><div class="line">			dfd.resolve(<span class="string">'一切正常!'</span>);</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="comment">// 置dfd状态为rejected</span></div><div class="line">			dfd.reject(<span class="string">'超时了!'</span>);</div><div class="line">		&#125;			</div><div class="line">	&#125;, delay * <span class="number">1000</span>)</div><div class="line">	<span class="comment">// 这里要返回Deferred下的promise对象Dererred对象的原因下面会解释</span></div><div class="line">	<span class="keyword">return</span> dfd.promise();</div><div class="line">&#125;</div><div class="line"></div><div class="line">Async()</div><div class="line">	.done(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">		log(data) <span class="comment">// 如果延迟不大于三秒 输出dfd.resolve()中的数据 '一切正常!'</span></div><div class="line">	&#125;)</div><div class="line">	.fail(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">		log(err) <span class="comment">// 反之则 输出dfd.reject()中的数据 '超时了!' </span></div><div class="line">	&#125;)</div><div class="line">	.always(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">		log(<span class="string">'执行完毕!'</span>); <span class="comment">// 总是输出 '执行完毕!'</span></div><div class="line">	&#125;)</div></pre></td></tr></table></figure>
<h3 id="尝试下通俗理解整个流程就是"><a href="#尝试下通俗理解整个流程就是" class="headerlink" title="尝试下通俗理解整个流程就是"></a>尝试下通俗理解整个流程就是</h3><ol>
<li><p>在某个操作<em>开始前</em>创建一个<code>Deferred</code>对象，然后执行操作</p>
</li>
<li><p>操作间可根据情况给dfd执行<code>relove</code>或者<code>reject</code>方法改变状态并传入数据</p>
</li>
<li><p>最后返回出dfd的对象下的一个promise对象，这里不直接返回dfd对象是因为dfd对象的状态是在第一次resolve或者reject后还可以更改的（不过里面的数据以第一次为准）！！</p>
</li>
<li><p>操作执行后用<code>done</code>和<code>fail</code>方法分别接受resolve和reject状态和数据（一一对应）然后执行回调（其实1.8还有个<code>then</code>方法，接受两个参数，第一个参数为<code>resolve</code>的回调，第二个为<code>reject</code>的）</p>
</li>
<li><p><code>always</code>是无论<code>resolve</code>还是<code>reject</code>都会执行。</p>
</li>
</ol>
<h3 id="讲个比较烂的比喻"><a href="#讲个比较烂的比喻" class="headerlink" title="讲个比较烂的比喻"></a>讲个比较烂的比喻</h3><p><strong>我是一个流水线车间质检工人，就在平常的这样的一天，来了一批玩具熊，嗯，接下来应该是这样的</strong></p>
<ol>
<li><p>来了一个检查目标（<code>$.Dererred()</code>），这时你还不知道它是好是坏</p>
</li>
<li><p>我靠我几十年的新东方炒菜技巧检验产品并给良品贴上了合格标签（<code>dfd.res* olve(合格标签)</code>），次品贴上回厂标签* （<code>dfd.reject(回厂标签及原因)</code>）</p>
</li>
<li><p>然后通过的良品和次品都来到了各自的包装口打好包，不能对里面的标签做更改了！（<code>dfd.promise()</code>）去往自己下一个目的地(<code>return dfd.promise</code>)</p>
</li>
<li><p>再然后良品来到了熊孩子手中（<code>.done()</code>）,次品回到了厂里（<code>.fail()</code>）,最后不管玩具熊到了哪里，其实都会被开膛破肚（<code>.always()</code>好吧这里有点牵强）</p>
</li>
</ol>
<h3 id="这里再上一张图来解释下！"><a href="#这里再上一张图来解释下！" class="headerlink" title="这里再上一张图来解释下！"></a>这里再上一张图来解释下！</h3><p><img src="http://waynecz.github.io/css/images/postimg/160325/2.png" alt=""></p>
<p>还有值得说一下的是<code>always</code>里的回调，我在实际中使用时发现总是在<code>done</code>和<code>fail</code>里的回调(假设为同步)执行完毕后后执行的。</p>
<h2 id="金掌银掌仙人掌-掌声有请-ES6-Promise"><a href="#金掌银掌仙人掌-掌声有请-ES6-Promise" class="headerlink" title="金掌银掌仙人掌 掌声有请 ES6 Promise"></a>金掌银掌仙人掌 掌声有请 ES6 Promise</h2><p>和上面一样，先打印一下！</p>
<p><img src="http://waynecz.github.io/css/images/postimg/160325/3.png" alt=""></p>
<p>可以看到Promise下也有熟悉的<code>resolve</code>和<code>reject</code>方法，好像和jQ的<code>Deferred</code>颇为相似！但是不是少了点什么呢？<code>done</code>或者<code>fail</code>之类的流程控制的方法呢？？</p>
<p>不急，其实展开<code>prototype</code>原型上就可以看到挂载着的<code>then</code>方法了！（像极了jQ1.8后那个<code>then</code>，不过我觉得应该说是jQ来遵循<code>Promise</code>才对）<br><img src="http://waynecz.github.io/css/images/postimg/160325/4.png" alt=""></p>
<p>Promise其实就是个构造函数，还是之前的例子，这里我们分三步走</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Async = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="comment">// 第一步，新建个promise对象，所需的异步操作在其中进行</span></div><div class="line">	<span class="keyword">var</span> prms = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</div><div class="line">		<span class="comment">// 生成一个0到5秒的延迟</span></div><div class="line">		<span class="keyword">var</span> delay = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">5</span>);</div><div class="line">		<span class="comment">// 这里调用一个异步操作</span></div><div class="line">		setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="comment">// 第二步， 根据情况置promise为resolve或者reject</span></div><div class="line">			<span class="keyword">if</span> (delay &lt;= <span class="number">2</span>) &#123;</div><div class="line">				<span class="comment">// 置dfd状态为resolved</span></div><div class="line">				resolve(<span class="string">'一切正常!'</span>);</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				<span class="comment">// 置dfd状态为rejected</span></div><div class="line">				reject(<span class="string">'超时了!'</span>);</div><div class="line">			&#125;			</div><div class="line">		&#125;, delay * <span class="number">1000</span>)</div><div class="line">	&#125;)</div><div class="line">	<span class="comment">// 第三步，返回这个Promise对象</span></div><div class="line">	<span class="keyword">return</span> prms</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 强大的来了</span></div><div class="line">Async()</div><div class="line">	<span class="comment">// then接受两个函数分别处理resolve和reject两种状态</span></div><div class="line">	.then(</div><div class="line">	<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(data) <span class="comment">// 一切正常!</span></div><div class="line">	&#125;, </div><div class="line">	<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(err) <span class="comment">// 超时了!!</span></div><div class="line">	&#125;)</div></pre></td></tr></table></figure>
<p>粗粗一看好像和<code>Dererred</code>不能更像了，，不过细心点的话可以发现我们在韩书力直接返回了<code>prms</code>这个对象，而不是像之前把羊包装了一层。。。对！因为Promise的特性就是一旦第一次赋予了状态后面就无法更改了，这也算省心多了吧。但是问题来了，所以我为什么要选择用<code>Promise</code>呢？？</p>
<p>这么说吧，<strong>它是原生的 它是原生的 它是原生的！</strong>，还有<strong>可以链式链式链式链式调用！</strong>，我们可以把每一个<code>then</code>或者<code>catch</code>当做一个处理器, 比如这样</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Async()</div><div class="line">	<span class="comment">// 这里暂时只处理resolve</span></div><div class="line">	.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(data) <span class="comment">// 一切正常!</span></div><div class="line">		<span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="string">'随便什么'</span>);</div><div class="line">	&#125;)</div><div class="line">	<span class="comment">// 下一个then处理器接收到上一个处理器发出的数据</span></div><div class="line">	.then(<span class="function"><span class="keyword">function</span>(<span class="params">data2</span>) </span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(data2) <span class="comment">// 随便什么</span></div><div class="line">		<span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="string">'错误数据'</span>);</div><div class="line">	&#125;)</div><div class="line">	...</div></pre></td></tr></table></figure>
<p>对！没看错，其实在<code>then</code>里面你还可以<code>return</code>其他的<code>promise</code>对象传并递数据！更有甚你甚至可以什么都不返回，比如说这样</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">Async()</div><div class="line">	.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(data) <span class="comment">// 一切正常!</span></div><div class="line">	&#125;)</div><div class="line">	<span class="comment">// 上面那个处理器如果不return任何东西 就会默认返回个resolve(undefined)</span></div><div class="line">	<span class="comment">// 然后下面的处理器就会接收到这个resolve(undefined)</span></div><div class="line">	.then(<span class="function"><span class="keyword">function</span>(<span class="params">data2</span>) </span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(data2) <span class="comment">// undefined</span></div><div class="line">		<span class="comment">// 虽然没有数据来处理，但是你还可以在这里做一些事情啊，例如</span></div><div class="line">		<span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="string">'错误数据'</span>);</div><div class="line">	&#125;)</div><div class="line">	<span class="comment">// 嗒哒，catch就这么登场了，这里用catch处理上个then处理器发出的reject</span></div><div class="line">	.catch(fucntion(err)&#123;</div><div class="line">		<span class="built_in">console</span>.log(err) <span class="comment">// 错误数据</span></div><div class="line">		<span class="keyword">return</span> <span class="string">'那直接返回个字符串呢？'</span></div><div class="line">	&#125;)</div><div class="line">	<span class="comment">// 上个catch处理器返回了个字符串其实也会被下个处理器接受</span></div><div class="line">	<span class="comment">// 相当于resolve('那直接返回个字符串呢？')</span></div><div class="line">	.then(<span class="function"><span class="keyword">function</span>(<span class="params">data3</span>)</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(data3) <span class="comment">// 那直接返回个字符串呢？</span></div><div class="line">	&#125;)</div><div class="line">	<span class="comment">// 好，接着我们来试试在没有返回任何东西的情况下接一个catch处理器</span></div><div class="line">	.catch(<span class="function"><span class="keyword">function</span>(<span class="params">err2</span>)</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(err2) </div><div class="line">		<span class="comment">// 我们可以来猜一下上面会输出什么，undefined吗？</span></div><div class="line">		<span class="comment">// 错，其实这里什么都不会输出，因为这个catch接收的是resolve</span></div><div class="line">		<span class="comment">// 但它并不会吞没这个resolve而是选择跳过，例如我们这里再返回</span></div><div class="line">		<span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="string">'这个字符串会被跳过'</span>)</div><div class="line">	&#125;)</div><div class="line">	<span class="comment">// 这里紧接着个then处理器，它接受到的数据呢</span></div><div class="line">	<span class="comment">// 其实并不是上个catch返回的resolve('这个字符串会被跳过')</span></div><div class="line">	<span class="comment">// 而是catch之前那个then处理器默认返回的resolve(undefined)</span></div><div class="line">	.then(<span class="function"><span class="keyword">function</span>(<span class="params">data4</span>)</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(data4) <span class="comment">// undefined</span></div><div class="line">	&#125;)</div></pre></td></tr></table></figure>
<p>有点被绕晕了吧<img src="http://waynecz.github.io/css/images/postimg/160325/5.gif" style="display:inline-block"></p>
<h3 id="我们用一句话来梳理下："><a href="#我们用一句话来梳理下：" class="headerlink" title="我们用一句话来梳理下："></a>我们用一句话来梳理下：</h3><p>链式调下会有一串<code>then</code>和<code>catch</code>，这些<code>then</code>和<code>catch</code>处理器会<em>按照顺序</em>接受<em>上个处理器</em>所产生的返回值，并且根据<em>传入的状态</em>做出<em>不同</em>响应，要么跳过，要么处理(所以上面23行处的<code>catch</code>处理器被跳过了)</p>
<p>ps: 上面我们用的<code>then</code>处理器只有一个函数参数，所以只会处理<code>resolve</code>状态，如果是两个<code>then</code>就可以处理<code>reject</code>了。</p>
<p>－－－－更新于5月11日－－－－－</p>
<h3 id="catch使用的注意"><a href="#catch使用的注意" class="headerlink" title="catch使用的注意"></a><code>catch</code>使用的注意</h3><p>上面一块代码中引出了<code>catch</code>处理器, 之前以为 <code>cacth()</code> 是 <code>then(null, ...)</code> 的语法糖, 其实这么说不完全正确（功能层面上来说这两个是完全相同的没错——都是处理<code>reject</code>和异常），但是到了实际使用中<a href="https://pouchdb.com/2015/05/18/we-have-a-problem-with-promises.html" target="_blank" rel="external">Promise中的菜鸟和高阶错误</a>文章中给出了明确的情况证明，这里贴一下:</p>
<p>首先只处理异常情况，下面两个是等价的</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">somePromise().catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">  <span class="comment">// 处理异常</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">somePromise().then(<span class="literal">null</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">  <span class="comment">// 处理异常</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>但是，如果不只是处理异常的下面两种情况下就不一样了</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">somePromise().then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> otherPromise();</div><div class="line">&#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">  <span class="comment">// 处理异常</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">somePromise().then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> otherPromise();</div><div class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">  <span class="comment">// 处理异常</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>不够清楚吗？那么如果是这样呢？如果<code>第一个回调函数抛出一个错误</code>会发生什么？</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">somePromise().then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'这里错了！'</span>);</div><div class="line">&#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(err)</div><div class="line">  <span class="comment">// 这里错了! :)</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">somePromise().then(</div><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'这里错了'</span>);</div><div class="line">&#125;, </div><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(err)</div><div class="line">  <span class="comment">// 未知 :(</span></div><div class="line">  <span class="comment">// 并没有catch到上面那个Error</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>结论就是，当使用 <code>then(resolveHandler, rejectHandler)</code> ， <code>rejectHandler</code> 不会捕获在 <code>resolveHandler</code> 中抛出的错误!</p>
<h4 id="贴完了，好吧，这有什么用呢？"><a href="#贴完了，好吧，这有什么用呢？" class="headerlink" title="贴完了，好吧，这有什么用呢？"></a>贴完了，好吧，这有什么用呢？</h4><p>看似这个注意项并不影响平常使用，原文作者也说道:</p>
<blockquote>
<p>因为，笔者的个人习惯是从不使用then方法的第二个参数，转而使用 catch() 方法</p>
</blockquote>
<p>那么，问题来了，如何正确的使用<code>catch</code>呢? 其实我没有很好的想明白，<code>希望指教</code>，随便抛两个砖</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1</span></div><div class="line">somePromise()</div><div class="line">    .then(resolveHandler)</div><div class="line">    <span class="comment">// 这个catch会处理somePromise或者resolveHandler的异常</span></div><div class="line">    .catch(rejectHandler) </div><div class="line">    .then(otherResolveHandler)</div><div class="line">    <span class="comment">// 而这个catch呢只会处理resolveHandler的异常</span></div><div class="line">    .catch(otherRejectHandler)</div><div class="line">    </div><div class="line"><span class="comment">// 2</span></div><div class="line">somePromise()</div><div class="line">    .then(resolveHandler)</div><div class="line">    .then(otherResolveHandler)</div><div class="line">    <span class="comment">// 至于这个catch则会处理somePromise、resolveHandler和otherResolveHandler的异常</span></div><div class="line">    .catch(rejectHandler)</div><div class="line">    </div><div class="line"><span class="comment">// 3 </span></div><div class="line">somePromise()</div><div class="line">    .catch(<span class="built_in">console</span>.log.bind(<span class="built_in">console</span>))</div><div class="line">    <span class="comment">//等价于</span></div><div class="line">    .catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(err)</div><div class="line">    &#125;)</div></pre></td></tr></table></figure>
<p>哈哈哈哈哈哈,还是好好再去想想Promise去了，弄明白了再来补充，再次谢谢<a href="https://segmentfault.com/u/nightire" target="_blank" rel="external">@n͛i͛g͛h͛t͛i͛r͛e͛大大</a>，荆柯刺秦王</p>
<p>写的很粗糙，有错误的地方希望多多指教！！</p>
<p><img src="http://7xntdk.com1.z0.glb.clouddn.com/19.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xntdk.com1.z0.glb.clouddn.com/12.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在&lt;a href=&quot;https://segmentfault.com/a/1190000005072394&quot;&gt;SF&lt;/a&gt;由n͛i͛g͛h͛t͛i͛r͛e͛大大指出关于Promise中catch用的不到位的错误。贴上大大推荐的文章&lt;a href=&quot;https://pouchdb.com/2015/05/18/we-have-a-problem-with-promises.html&quot;&gt;Promise中的菜鸟和高阶错误&lt;/a&gt;，文章很详细说明了一些Promise使用中的错误和指导。另外更正内容在后面补充。&lt;/p&gt;
&lt;h2 id=&quot;从-jQuery-Deferred-开始&quot;&gt;&lt;a href=&quot;#从-jQuery-Deferred-开始&quot; class=&quot;headerlink&quot; title=&quot;从 jQuery $.Deferred() 开始&quot;&gt;&lt;/a&gt;从 jQuery $.Deferred() 开始&lt;/h2&gt;&lt;p&gt;说到异步流程控制，之前用的比较多的是jQ的Deferred。那Deferred是个啥呢，不清楚没关系，直接控制台来打印看下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://waynecz.github.io/css/images/postimg/160325/1.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://waynecz.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://waynecz.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>从git+add+commit+push 到 gamp!</title>
    <link href="http://waynecz.github.io/2016/03/06/%E4%BB%8Egit-add-commit-push-%E5%88%B0gamp/"/>
    <id>http://waynecz.github.io/2016/03/06/从git-add-commit-push-到gamp/</id>
    <published>2016-03-06T09:29:52.000Z</published>
    <updated>2016-05-27T02:53:46.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xntdk.com1.z0.glb.clouddn.com/14.jpg" alt=""></p>
<p>啊，新功能写完啦，提交！</p>
<p><img src="http://cdn.aixifan.com/dotnet/artemis/u/cms/www/201602/17223025pojushtl.jpg" alt=""><br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">add</span><span class="bash"> .</span></div><div class="line">git commit <span class="string">"new feature"</span></div><div class="line">git push</div></pre></td></tr></table></figure></p>
<p>咦？好想有个字写错了，没事，改！改完，提交！<br><a id="more"></a><br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">add</span><span class="bash"> .</span></div><div class="line">git commit <span class="string">"fix word"</span></div><div class="line">git push</div></pre></td></tr></table></figure></p>
<p>喔？这里还不如这样，再来！</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">add</span><span class="bash"> .</span></div><div class="line">git commit <span class="string">"xixixi"</span></div><div class="line">git push</div></pre></td></tr></table></figure>
<p>。。。。。。。。。</p>
<p>虽然不会每次都这么极端，但是有时候按步骤提交真的很烦。。</p>
<p>来点alias?好啊，这么做(以下均osx下为准，装载itern和ohmyzsh)<br><figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 打开这个.bash_profile </span></div><div class="line">vi ~/.bash_profile </div><div class="line"></div><div class="line"><span class="comment">// 加入下面这些</span></div><div class="line"><span class="keyword">alias</span> gaa=<span class="string">"git add ."</span></div><div class="line"><span class="keyword">alias</span> gm=<span class="string">"git commit -m "</span></div><div class="line"><span class="keyword">alias</span> gp=<span class="string">"git push"</span></div><div class="line"><span class="keyword">alias</span> gc=<span class="string">"git checkout"</span></div><div class="line"><span class="keyword">alias</span> gcb=<span class="string">"git checkout -b"</span></div><div class="line">...<span class="comment">// 其他看着加</span></div><div class="line"></div><div class="line"><span class="comment">//然后</span></div><div class="line">vi ~/.zshrc </div><div class="line"><span class="comment">//加入下面这段</span></div><div class="line"><span class="keyword">source</span> ~/.bash_profile <span class="comment">//这样每次zsh的shell启动都会初始化alias了</span></div></pre></td></tr></table></figure></p>
<p>保存,然后！<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 提交就变成了</span></div><div class="line">gaa</div><div class="line">gm <span class="string">""</span></div><div class="line">gp</div></pre></td></tr></table></figure></p>
<p>就只需要这样了，<em>BUT</em> 一次提交还是要三行命令啊！敢不敢再短点？！好吧接下去新建一个<code>gitpush.sh</code>，里面内容写：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash.sh</span></div><div class="line"></div><div class="line"><span class="comment">#提交前拉代码绝对是个好习惯</span></div><div class="line">git pull</div><div class="line"></div><div class="line"><span class="comment">#添加所有文件到本地仓库</span></div><div class="line">git add .</div><div class="line"></div><div class="line"><span class="comment">#提交文件到本地仓库</span></div><div class="line">git commit -m <span class="string">"<span class="variable">$1</span>"</span></div><div class="line"></div><div class="line"><span class="comment">#提交到远程分支</span></div><div class="line">git push</div></pre></td></tr></table></figure>
<p>OK，保存到｀~/shell｀ 下<br>然后<code>vi ~/.bash_profile</code>加入这句</p>
<figure class="highlight ceylon"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">alias</span> gamp=<span class="string">"sh ~/shell/gitpush.sh"</span> <span class="comment">// 这里只要指定文件就行</span></div></pre></td></tr></table></figure>
<p>嘻嘻嘻，使用的话</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">gamp</span> <span class="string">"something"</span></div></pre></td></tr></table></figure>
<p>煲仔饭！再见（最后谢敏强，因为这一切其实是他的做的！）</p>
<p><img src="http://7xntdk.com1.z0.glb.clouddn.com/12.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xntdk.com1.z0.glb.clouddn.com/14.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;啊，新功能写完啦，提交！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cdn.aixifan.com/dotnet/artemis/u/cms/www/201602/17223025pojushtl.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;figure class=&quot;highlight dockerfile&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git &lt;span class=&quot;keyword&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; .&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/span&gt;git commit &lt;span class=&quot;string&quot;&gt;&quot;new feature&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git push&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;咦？好想有个字写错了，没事，改！改完，提交！&lt;br&gt;
    
    </summary>
    
      <category term="计算机" scheme="http://waynecz.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
      <category term="shell" scheme="http://waynecz.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Ajax的懒人姿势</title>
    <link href="http://waynecz.github.io/2016/03/05/Ajax%E7%9A%84%E6%87%92%E4%BA%BA%E5%A7%BF%E5%8A%BF/"/>
    <id>http://waynecz.github.io/2016/03/05/Ajax的懒人姿势/</id>
    <published>2016-03-05T01:56:02.000Z</published>
    <updated>2016-04-25T06:23:18.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xntdk.com1.z0.glb.clouddn.com/13.jpg" alt=""></p>
<p>jq的ajax是个好东西，之前每次是这么写的</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.xhrCtrl = &#123;&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> doAjax = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">if</span> (xhr.doAjax)&#123;</div><div class="line">		<span class="comment">// 重复点击控制</span></div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span> </div><div class="line">	&#125;</div><div class="line">	<span class="comment">//按钮控制</span></div><div class="line">	$(<span class="string">"#theButton"</span>).prop(<span class="string">'disabled'</span>, <span class="literal">true</span>);</div><div class="line">	</div><div class="line">	xhr.doAjax = <span class="literal">true</span>;	</div><div class="line">	$.ajax(&#123;</div><div class="line">		<span class="attr">url</span>: url</div><div class="line">	    type: <span class="string">"post"</span>,</div><div class="line">	    <span class="attr">dataType</span>: <span class="string">"json"</span>,</div><div class="line">	    <span class="attr">data</span>: postData</div><div class="line">	&#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">	    <span class="comment">// Ajax 调用成功执行</span></div><div class="line">	    <span class="comment">// do something</span></div><div class="line">	&#125;).fail(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">	    <span class="comment">// Ajax 调用失败执行</span></div><div class="line">	    <span class="built_in">console</span>.log(<span class="string">'Fail!'</span>);</div><div class="line">	&#125;).always(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	    <span class="comment">// 不管成功与否，都会执行</span></div><div class="line">    	xhr.doAjax = <span class="literal">null</span>;</div><div class="line">   		$(<span class="string">"#theButton"</span>).prop(<span class="string">'disabled'</span>, <span class="literal">false</span>);</div><div class="line">	&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>写多了就发现，其实业务交互都在<code>.done()</code>里处理，<code>.fail()</code>和<code>.always()</code>看起来都是些重复处理的动作。然后再看异步流程控制时看到了<a href="https://segmentfault.com/a/1190000003691961" target="_blank" rel="external">这个！</a></p>
<p>摘抄出来一段说就是写个公共的ajax方法来让每次ajax都只要处理<code>.done()</code>多酷！！主要用到JQ的异步控制，主角就是<code>Deferred</code> 和 <code>Promise</code>,这两个的关系就是：</p>
<ul>
<li>Deffered 触发 resolve 或 reject</li>
<li>Promise 中申明 resolve 或 reject 后应该做什么（回调） </li>
</ul>
<p>初步改善代码,这里封装在jQuery对象上<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</div><div class="line">    $.extend(&#123;</div><div class="line">        <span class="attr">jax</span>: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> <span class="keyword">default</span> = &#123;</div><div class="line">                <span class="attr">data</span>  : &#123;&#125;,</div><div class="line">                <span class="attr">async</span> : <span class="literal">true</span>,</div><div class="line">                <span class="attr">type</span>  : <span class="string">'post'</span>,</div><div class="line">                <span class="attr">ctrl</span>  : <span class="string">''</span>,</div><div class="line">                <span class="attr">button</span>: <span class="literal">undefined</span>,</div><div class="line">                <span class="attr">errmsg</span>: <span class="string">'服务器炸了,稍后再试吧 - -||'</span></div><div class="line">            &#125;;</div><div class="line"></div><div class="line">            <span class="keyword">var</span> setting = $.extend(<span class="keyword">default</span>, options);</div><div class="line">			</div><div class="line">	    <span class="comment">// 提交控制</span></div><div class="line">            <span class="keyword">if</span> (setting.ctrl) &#123;</div><div class="line">                xhrCtrl[setting.ctrl] = <span class="literal">true</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 按钮控制</span></div><div class="line">            <span class="keyword">if</span> (setting.button) &#123;</div><div class="line">                setting.button.prop(<span class="string">'disabled'</span>, <span class="literal">true</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 等待动画</span></div><div class="line">            $(<span class="string">'#ajaxLoader'</span>).fadeIn(<span class="number">150</span>);</div><div class="line">			</div><div class="line">	    <span class="comment">// 创建一个deferred对象</span></div><div class="line">            <span class="keyword">var</span> deferred = $.Deferred();</div><div class="line"></div><div class="line">            $.ajax(setting.url, &#123;</div><div class="line">                <span class="attr">type</span>    : setting.type,</div><div class="line">                <span class="attr">dataType</span>: <span class="string">'json'</span>,</div><div class="line">                <span class="attr">async</span>   : setting.async,</div><div class="line">                <span class="attr">data</span>    : setting.data</div><div class="line">            &#125;).done(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">            	 <span class="comment">// 第一个注意点，根据后台灵活调整</span></div><div class="line">                <span class="keyword">if</span> (data &amp;&amp; !data.success) &#123;</div><div class="line">                	<span class="comment">//假设消息提示为$.toast</span></div><div class="line">                    $.toast(data.msg || <span class="string">"发生了奇异的错误"</span>);</div><div class="line">                    </div><div class="line">                    deferred.reject();</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data &amp;&amp; data.success) &#123;</div><div class="line">                	<span class="comment">//  成功，传递数据</span></div><div class="line">                    deferred.resolve(data);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    $.toast(<span class="string">"oops! 服务器未返回任何数据"</span>);</div><div class="line">                    </div><div class="line">                    deferred.reject();</div><div class="line">                &#125;</div><div class="line">            &#125;).fail(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                $.toast(setting.errmsg, <span class="string">'warning'</span>);</div><div class="line">                </div><div class="line">                deferred.reject();</div><div class="line">            &#125;).always(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span> (setting.ctrl) &#123;</div><div class="line">                    xhrCtrl[setting.ctrl] = <span class="literal">null</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (setting.button) &#123;</div><div class="line">                    setting.button.prop(<span class="string">'disabled'</span>, <span class="literal">false</span>);</div><div class="line">                &#125;</div><div class="line">                $(<span class="string">'#ajaxLoader'</span>).fadeOut(<span class="number">150</span>);</div><div class="line">            &#125;)</div><div class="line">            <span class="keyword">return</span> deferred.promise();</div><div class="line">        &#125;,</div><div class="line">   &#125;)</div><div class="line">&#125;)(jQuery);</div></pre></td></tr></table></figure></p>
<p>调用的话简直干净！！！！！:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> doAjax = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	$.jax(&#123;</div><div class="line">		<span class="attr">url</span>   : url,</div><div class="line">	    <span class="attr">data</span>  : postData,</div><div class="line">	    <span class="attr">button</span>: $(<span class="string">'#button'</span>),</div><div class="line">	    <span class="attr">ctrl</span>  : <span class="string">'doAjax'</span></div><div class="line">	&#125;).done(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">		<span class="comment">//do something</span></div><div class="line">	&#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>不过这里有几个注意点，第一个注意点就是需要和后台约定下返回数据中success标识的结构，然后，然后就没有然后了，就是这么简单</p>
<p><img src="http://i40.tinypic.com/w8we8m.jpg" alt="笑"><br>世界和平，火锅好吃，再见。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xntdk.com1.z0.glb.clouddn.com/13.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;jq的ajax是个好东西，之前每次是这么写的&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.xhrCtrl = &amp;#123;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; doAjax = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (xhr.doAjax)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 重复点击控制&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//按钮控制&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	$(&lt;span class=&quot;string&quot;&gt;&quot;#theButton&quot;&lt;/span&gt;).prop(&lt;span class=&quot;string&quot;&gt;&#39;disabled&#39;&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	xhr.doAjax = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;	&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	$.ajax(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;attr&quot;&gt;url&lt;/span&gt;: url&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	    type: &lt;span class=&quot;string&quot;&gt;&quot;post&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	    &lt;span class=&quot;attr&quot;&gt;dataType&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;json&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	    &lt;span class=&quot;attr&quot;&gt;data&lt;/span&gt;: postData&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;).done(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;data&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	    &lt;span class=&quot;comment&quot;&gt;// Ajax 调用成功执行&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	    &lt;span class=&quot;comment&quot;&gt;// do something&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;).fail(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;err&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	    &lt;span class=&quot;comment&quot;&gt;// Ajax 调用失败执行&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Fail!&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;).always(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	    &lt;span class=&quot;comment&quot;&gt;// 不管成功与否，都会执行&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    	xhr.doAjax = &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   		$(&lt;span class=&quot;string&quot;&gt;&quot;#theButton&quot;&lt;/span&gt;).prop(&lt;span class=&quot;string&quot;&gt;&#39;disabled&#39;&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="前端" scheme="http://waynecz.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://waynecz.github.io/tags/javascript/"/>
    
      <category term="jquery" scheme="http://waynecz.github.io/tags/jquery/"/>
    
  </entry>
  
  <entry>
    <title>CSS动画优雅降级的简单总结</title>
    <link href="http://waynecz.github.io/2016/02/01/CSS%E5%8A%A8%E7%94%BB%E4%BC%98%E9%9B%85%E9%99%8D%E7%BA%A7%E7%9A%84%E7%AE%80%E5%8D%95%E6%80%BB%E7%BB%93/"/>
    <id>http://waynecz.github.io/2016/02/01/CSS动画优雅降级的简单总结/</id>
    <published>2016-02-01T03:20:16.000Z</published>
    <updated>2016-04-25T06:15:07.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xntdk.com1.z0.glb.clouddn.com/Rough%20Sea.jpg" alt=""></p>
<p>虽然一直在现在的项目中用css动画，但是没去仔细思考兼容问题，现在做个思路总结</p>
<p>列几个 <a href="http://caniuse.com" target="_blank" rel="external">CSS动画相关属性的兼容图</a>:</p>
<ol>
<li><code>animation / keyframes</code> 浏览器支持情况 :<br><img src="http://7xntdk.com1.z0.glb.clouddn.com/animation-caniuse.png" alt="animation浏览器支持情况"><a id="more"></a></li>
<li><code>transform 2D</code> 浏览器支持情况 :<br><img src="http://7xntdk.com1.z0.glb.clouddn.com/transform2d-caniuse.png" alt="transform2D浏览器支持情况"></li>
<li><code>transform 3D / perspective</code> 浏览器支持情况 :<br><img src="http://7xntdk.com1.z0.glb.clouddn.com/perspective-caniuse.png" alt="transform2D浏览器支持情况"></li>
<li><code>transition</code> 浏览器支持情况 :<br><img src="http://7xntdk.com1.z0.glb.clouddn.com/transition-caniuse.png" alt="transition 浏览器支持情况"></li>
</ol>
<p>可以看到动画在IE8（<em>这里主要讨论IE</em>）及以下完全不支持，IE9由于只支持<code>transform(非transform3d)</code>所以也和css动画 <strong>say goodbye</strong> 了。<br>但是项目一定要兼容IE9，又不肯因为一个浏览器放弃整个迪士尼，怎么办？</p>
<p><img src="http://7xntdk.com1.z0.glb.clouddn.com/depu.gif" alt="">  </p>
<p>优雅降级咯，先说下一个简单的小例子：<code>一个元素在页面加载时渐进入页面</code>，上面可以看到气势IE9不支持animation和transform3d以及transition，所以一个的方案就是让IE9没有动画（主要就是让IE9下元素呆在动画结束的最后位置），这里元素初始状态需要在画面外并且是隐身，看代码    </p>
<p>HTML<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"a"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>CSS<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">  <span class="attribute">background</span>: <span class="number">#3ea5ff</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.a</span> &#123; <span class="comment">/*a初始化元素动画前样式及加入动画*/</span></div><div class="line">  <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(-300px,0,0);<span class="comment">/*现代浏览器下移开元素*/</span></div><div class="line">  <span class="attribute">-ms-transform</span>: <span class="built_in">translate3d</span>(-300px,0,0);<span class="comment">/*IE10+下移开元素*/</span></div><div class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;<span class="comment">/*透明元素*/</span></div><div class="line">  <span class="attribute">opacity</span>:<span class="number">1</span>\<span class="number">9</span>\<span class="number">0</span>; <span class="comment">/*IE9hack，是元素不透明*/</span></div><div class="line">  <span class="attribute">animation</span>: leftIn .<span class="number">7s</span> ease-out forwards;  </div><div class="line">  </div><div class="line">&#125;</div><div class="line">@<span class="keyword">keyframes</span> leftIn &#123;</div><div class="line">  0% &#123;<span class="attribute">transform</span>: <span class="built_in">translate3d</span>(-300px,0,0);<span class="attribute">opacity</span>: <span class="number">0</span>&#125;</div><div class="line">  100% &#123;<span class="attribute">transform</span>: <span class="built_in">translate3d</span>(0,0,0);<span class="attribute">opacity</span>: <span class="number">1</span>&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>好简单是不是。。主要功臣自然是<code>translate3d</code>,因为IE9不支持自然会忽略掉，所以translate也在IE下不起效了，opacity等简单属性做个hack即可。</p>
<p>接下来随便写下第二种的思路，用JQ动画来替代，还是上面那个例子吧：<br>首先当然要判断浏览器支不支持要用到的CSS属性，判断函数如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isSupportThis</span>(<span class="params">attrName</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> prefixs = [<span class="string">'webkit'</span>, <span class="string">'Moz'</span>, <span class="string">'ms'</span>, <span class="string">'o'</span>],</div><div class="line">		i,</div><div class="line">		humpString = [],</div><div class="line">		htmlStyle = <span class="built_in">document</span>.documentElement.style,</div><div class="line">		<span class="comment">// 将animation-delay这种带杠转化为htmlStyle中的驼峰属性名</span></div><div class="line">		toHumb = <span class="function"><span class="keyword">function</span> (<span class="params">string</span>) </span>&#123;</div><div class="line"> 			<span class="keyword">return</span> string.replace(<span class="regexp">/-(\w)/g</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$<span class="number">0</span>, $<span class="number">1</span></span>) </span>&#123;</div><div class="line">				<span class="keyword">return</span> $<span class="number">1.</span>toUpperCase();</div><div class="line">			&#125;);</div><div class="line">		&#125;;</div><div class="line"> </div><div class="line">	<span class="keyword">for</span> (i <span class="keyword">in</span> prefixs) &#123;</div><div class="line">		humpString.push(toHumb(prefixs[i] + <span class="string">'-'</span> + attrName))</div><div class="line">	&#125;;</div><div class="line"> </div><div class="line">	humpString.push(toHumb(attrName));</div><div class="line"> </div><div class="line">	<span class="keyword">for</span> (i <span class="keyword">in</span> humpString) &#123;</div><div class="line">		<span class="keyword">if</span> (humpString[i] <span class="keyword">in</span> htmlStyle) <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">	&#125;;</div><div class="line"> </div><div class="line">	<span class="keyword">return</span> <span class="literal">false</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">isSupportThis(<span class="string">'animation'</span>) <span class="comment">// IE9下false</span></div></pre></td></tr></table></figure>
<p>然后如果不支持的话就对<code>$(&#39;.a&#39;)</code>做下动画处理，当然，如果动画元素很多且很杂，我们可以事先未那些要进行动画的元素统一加上<code>class=&quot;animation&quot;</code>之类的后面好处理，<code>animation-delay</code>之类的也可以用<code>delay()</code>代替</p>
<p>就到这</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xntdk.com1.z0.glb.clouddn.com/Rough%20Sea.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;虽然一直在现在的项目中用css动画，但是没去仔细思考兼容问题，现在做个思路总结&lt;/p&gt;
&lt;p&gt;列几个 &lt;a href=&quot;http://caniuse.com&quot;&gt;CSS动画相关属性的兼容图&lt;/a&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;animation / keyframes&lt;/code&gt; 浏览器支持情况 :&lt;br&gt;&lt;img src=&quot;http://7xntdk.com1.z0.glb.clouddn.com/animation-caniuse.png&quot; alt=&quot;animation浏览器支持情况&quot;&gt;
    
    </summary>
    
      <category term="前端" scheme="http://waynecz.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://waynecz.github.io/tags/javascript/"/>
    
      <category term="css3" scheme="http://waynecz.github.io/tags/css3/"/>
    
  </entry>
  
  <entry>
    <title>自己几个常用的CSS片段,多为CSS3</title>
    <link href="http://waynecz.github.io/2016/01/25/%E7%BA%AA%E5%BD%95%E5%87%A0%E4%B8%AACSS%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/"/>
    <id>http://waynecz.github.io/2016/01/25/纪录几个CSS奇技淫巧/</id>
    <published>2016-01-25T07:10:36.000Z</published>
    <updated>2017-02-27T15:18:38.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xntdk.com1.z0.glb.clouddn.com/shushu.jpeg" alt="叔叔"></p>
<h2 id="偶尔添加"><a href="#偶尔添加" class="headerlink" title="偶尔添加"></a>偶尔添加</h2><ol>
<li><p>除去最后一个li的边框</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:not(</span><span class="selector-pseudo">:last-child)</span> &#123;</div><div class="line">	<span class="attribute">border</span>: <span class="number">1px</span> solid black;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 浏览器支持情况：<strong>IE9+</strong></p>
</li>
</ol>
<a id="more"></a>
<ol>
<li><p>文字过长省略号显示             </p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span> &#123;</div><div class="line">	<span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">	<span class="attribute">text-overflow</span>: clip;</div><div class="line">	<span class="attribute">overflow</span>: hidden;</div><div class="line">	<span class="attribute">white-space</span>: nowrap; <span class="comment">/*强制不换行*/</span></div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p> 浏览器支持情况：<strong>IE11都不支持！firefox加前缀</strong></p>
</li>
<li><p>去浮动，撑开元素！其实一般情况之遥氟元素一个<code>overflow:hidden</code>就可以了</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.clearfix &#123;</div><div class="line">	*zoom: 1; /* 兼容IE*/</div><div class="line"> &#125;</div><div class="line"> .clearfix:after &#123;</div><div class="line">	content: '\200B' ; /* 空字符*/</div><div class="line">	display: block;</div><div class="line">	height: 0;</div><div class="line">	clear: both;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p> 浏览器支持情况：<strong>allllllll</strong>      </p>
</li>
<li><p>绝对居中</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span> &#123;</div><div class="line">	<span class="attribute">position</span>: relative; </div><div class="line">  &#125;</div><div class="line"> <span class="selector-class">.child</span> &#123;</div><div class="line">	<span class="attribute">position</span>: absolute;</div><div class="line">	<span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">	<span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">	<span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">	<span class="attribute">bottom</span>: <span class="number">0</span>;</div><div class="line">	<span class="attribute">margin</span>: auto;</div><div class="line">	<span class="attribute">height</span>: <span class="number">999px</span>;</div><div class="line">	<span class="comment">/* 这个方案需要子容器有一个固定的高，或百分比自适应于外部。它的高度不能是height:auto*/</span></div><div class="line"> &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>单个颜色实现<code>hover</code>,<code>active</code>颜色变化</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.button</span><span class="selector-pseudo">:before</span>  &#123;</div><div class="line">	<span class="attribute">position</span>: absolute;</div><div class="line">	<span class="attribute">left</span>:<span class="number">0</span>;<span class="attribute">right</span>:<span class="number">0</span>;<span class="attribute">bottom</span>:<span class="number">0</span>;<span class="attribute">top</span>:<span class="number">0</span>;</div><div class="line">	<span class="attribute">z-index</span>:-<span class="number">1</span>;</div><div class="line">	<span class="attribute">background</span>: <span class="built_in">rgba</span>(0, 0, 0, .1);</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.button</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">:before</span> &#123;</div><div class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.button</span><span class="selector-pseudo">:after</span>  &#123;</div><div class="line">	<span class="attribute">position</span>: absolute;</div><div class="line">	<span class="attribute">left</span>:<span class="number">0</span>;<span class="attribute">right</span>:<span class="number">0</span>;<span class="attribute">bottom</span>:<span class="number">0</span>;<span class="attribute">top</span>:<span class="number">0</span>;</div><div class="line">	<span class="attribute">z-index</span>:-<span class="number">1</span>;</div><div class="line">	<span class="attribute">background</span>: <span class="built_in">rgba</span>(255, 255, 255, .2);</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.button</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*首先button要创建层叠上下文*/</span></div></pre></td></tr></table></figure>
</li>
<li><p>inline元素实现换行</p>
</li>
</ol>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.inline</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">    <span class="attribute">content</span>: <span class="string">'A'</span>;<span class="comment">/*由0x000A简写而来，换行符*/</span></div><div class="line">    <span class="attribute">white-space</span>: pre;<span class="comment">/*保留元素后面的空白服和换行符*/</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xntdk.com1.z0.glb.clouddn.com/shushu.jpeg&quot; alt=&quot;叔叔&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;偶尔添加&quot;&gt;&lt;a href=&quot;#偶尔添加&quot; class=&quot;headerlink&quot; title=&quot;偶尔添加&quot;&gt;&lt;/a&gt;偶尔添加&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;除去最后一个li的边框&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:not(&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:last-child)&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;attribute&quot;&gt;border&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt; solid black;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 浏览器支持情况：&lt;strong&gt;IE9+&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="前端" scheme="http://waynecz.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="css3" scheme="http://waynecz.github.io/tags/css3/"/>
    
  </entry>
  
  <entry>
    <title>［摘抄］一次网页访问各互联网协议实例</title>
    <link href="http://waynecz.github.io/2016/01/12/%E4%B8%80%E6%AC%A1%E7%BD%91%E9%A1%B5%E8%AE%BF%E9%97%AE%E5%90%84%E4%BA%92%E8%81%94%E7%BD%91%E5%8D%8F%E8%AE%AE%E5%AE%9E%E4%BE%8B/"/>
    <id>http://waynecz.github.io/2016/01/12/一次网页访问各互联网协议实例/</id>
    <published>2016-01-12T11:20:16.000Z</published>
    <updated>2016-04-05T15:03:25.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xntdk.com1.z0.glb.clouddn.com/xingkong.jpg" alt="家门口"><br>摘抄自阮大的<a href="http://www.ruanyifeng.com/blog/2012/06/internet_protocol_suite_part_ii.html" target="_blank" rel="external">互联网协议入门</a>首先假定这是本机器设置</p>
<pre><code>*  本机的IP地址：192.168.1.100
*  子网掩码：255.255.255.0
*  网关的IP地址：192.168.1.1
*  DNS的IP地址：8.8.8.8
</code></pre><ol>
<li>访问<code>www.google.com</code><a id="more"></a></li>
<li>DNS协议        <ul>
<li>将网址转化为IP地址，已知DNS服务器为<code>8.8.8.8</code>，于是向这个地址发送一个DNS数据包（53端口），数据包如下<br><img src="http://image.beekka.com/blog/201206/bg2012061105.png" alt="image"><br>然后DNS服务器作出响应，告诉我们<code>Google</code>的IP地址是<code>172.194.72.105</code>。</li>
</ul>
</li>
<li><p>子网掩码</p>
<ul>
<li>解析来判断这个IP地址是不是在同一个子网络，这里用到子网掩码   ，已知子网掩码时<code>255.255.255.0</code>，本机用自己的IP地址<code>192.168.1.100</code>做一个二进制AND运算，计算结果为<code>192.168.1.0</code>，然后对Google的IP也做一下AND运算，结果为<code>172.194.72.0</code>，两个结果不相等，所以不为同一个子网络。                     </li>
<li>因此，我们要向Google发送数据包，<strong>必须通过网管<code>192.168.1.1</code>转发</strong>，也就是说，接收方的MAC地址是网关的MAC地址。</li>
</ul>
</li>
<li><p>应用层协议    </p>
<ul>
<li>浏览网页用的是HTTP协议，他的整个数据包结构是这样的<br><img src="http://image.beekka.com/blog/201206/bg2012061106.png" alt="image"><br>HTTP部分的内容类似于下面这样：    <pre><code>* GET / HTTP/1.1            
* Host: www.google.com      
* Connection: keep-alive       
* User-Agent: Mozilla/5.0 (Windows NT 6.1) ......    
* Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8    
* Accept-Encoding: gzip,deflate,sdch    
* Accept-Language: zh-CN,zh;q=0.8     
* Accept-Charset: GBK,utf-8;q=0.7,*;q=0.3    
* Cookie: ... ...
</code></pre>我们假定这个部分的长度为<code>4960</code>字节，它被嵌在TCP数据包中。</li>
</ul>
</li>
<li>TCP协议            <ul>
<li>TCP数据包数据包需要设置端口，接收方（Google）的HTTP默认端口是80，发送方（本机）的端口是<code>1024－65535</code>之间的整数，这里假定是51375。</li>
<li>TCP标头的长度为<code>20</code>字节，加上嵌入HTTP数据包，总长度变为<code>4980</code>字节。</li>
</ul>
</li>
<li>IP协议<ul>
<li>然后，TCP数据包再嵌入IP数据包。IP数据包需要设置双方的IP地址，这是已知的，发送方是<code>192.168.1.100</code>（本机），接收方是<code>172.194.72.105</code>（Google）</li>
<li>IP数据包标头为<code>20</code>字节，加上嵌入的TCP数据包，总大小为<code>5000</code>字节。</li>
</ul>
</li>
<li>以太网协议<ul>
<li>最后，IP    数据包嵌入以太网数据包，以太网数据包需要设置双方的MAC地址，发送方为本机的网卡MAC地址，接收方为网关192.168.1.1的MAC地址（通过ARP协议得到，这里ARP即本机<ul>
<li>发送一个包含在以太网数据包中的数据包，其中包含网关的IP地址，在对方的MAC地址这一栏，填<code>FF.FF.FF.FF</code>，表示这是一个<em>广播</em>地址它所在子网络的每一台主机，都会收到这个数据包，从中取出IP地址，与自身的IP地址进行比较。如果两者相同，都做出回复，向对方报告自己的MAC地址，否则就丢弃这个包。）。</li>
</ul>
</li>
<li>以太网数据包的部分，最大长度为<code>1500</code>字节，而现在的IP数据包长度为<code>5000</code>字节，因为每个包都有自己的IP标头（20字节），所以四个的IP数据包长度分别为<code>1500</code>，<code>1500</code>，<code>1500</code>，<code>560</code>。<br><img src="http://image.beekka.com/blog/201206/bg2012061107.png" alt="image"></li>
</ul>
</li>
<li>服务器响应<ul>
<li>经过多个网关转发，Google的服务器<code>172.194.72.105</code>收到了这四个以太网数据包。</li>
<li>根据IP标头的序列号，Google将这四个包拼接起来，取出完整的TCP数据包，然后读出里面的<code>HTTP请求</code>，接着做出<code>HTTP响应</code>，用TCP协议发回去</li>
<li>本机收到HTTP响应以后，就可以将网页显示出来，完成一次网络通信.    </li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xntdk.com1.z0.glb.clouddn.com/xingkong.jpg&quot; alt=&quot;家门口&quot;&gt;&lt;br&gt;摘抄自阮大的&lt;a href=&quot;http://www.ruanyifeng.com/blog/2012/06/internet_protocol_suite_part_ii.html&quot;&gt;互联网协议入门&lt;/a&gt;首先假定这是本机器设置&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*  本机的IP地址：192.168.1.100
*  子网掩码：255.255.255.0
*  网关的IP地址：192.168.1.1
*  DNS的IP地址：8.8.8.8
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;访问&lt;code&gt;www.google.com&lt;/code&gt;
    
    </summary>
    
      <category term="计算机" scheme="http://waynecz.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
      <category term="互网协议" scheme="http://waynecz.github.io/tags/%E4%BA%92%E7%BD%91%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>响应式设计下img标签如何设置才在移动端不下载图片</title>
    <link href="http://waynecz.github.io/2015/12/24/%E5%93%8D%E5%BA%94%E5%BC%8F%E8%AE%BE%E8%AE%A1%E4%B8%8Bimg%E6%A0%87%E7%AD%BE%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AE%E6%89%8D%E5%9C%A8%E7%A7%BB%E5%8A%A8%E7%AB%AF%E4%B8%8D%E4%B8%8B%E8%BD%BD%E5%9B%BE%E7%89%87/"/>
    <id>http://waynecz.github.io/2015/12/24/响应式设计下img标签如何设置才在移动端不下载图片/</id>
    <published>2015-12-24T09:22:07.000Z</published>
    <updated>2016-04-05T15:03:06.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xntdk.com1.z0.glb.clouddn.com/xihelajijiao.jpg" alt="西和垃圾角"></p>
<p>从前在一个页面中有一张很普通的图片，普通到像这个样子</p>
<pre><code>&lt;img src=&quot;pic.jpg&quot; alt=&quot;pic&quot;/&gt;  
</code></pre><p>然后想要这张图片在移动端(比如<code>max-device-width: 600px</code>)下的时候隐藏该图片，<br>但是直接<code>display:none</code>的话发现浏览器还是会加载，这恐怕对于移动端寸KB寸金的资源来说是一场灾难。  </p>
<p>于是琢磨怎么把图片弄消失掉，秉着能少写就少写写的原则，首先想到<code>img</code>标签的<code>srcset</code>属性。</p>
<a id="more"></a>
<p>关于<code>srcset</code>单个使用，简单的说就是<strong><code>让浏览器根据像素密度切换图片源</code></strong>，类似这个样子：</p>
<pre><code>&lt;img src=&quot;1.jpg&quot; srcset=&quot; 2.jpg 2x, 3.jpg 3x&quot;/&gt;
</code></pre><p>浏览器默认选择<code>1.jpg</code>，但是当设备像素密度为2的时候比如nexus5加载<code>2.jpg</code>，咦？？！！！有没有想到什么？！！！现在移动端貌似都是高像素比啊！，那我岂不是可以这样！：</p>
<pre><code>&lt;img src=&quot;pic.jpg&quot; srcset=&quot;null.jpg 1.5x, null.jpg 2x, null.jpg 3x&quot; alt=&quot;以此类推&quot;/&gt;
</code></pre><p> <code>null.jpg</code>是一张并不存在的图片，也可以是一张1K的小图。啊哈哈天真的我真这样写进公司的官网里面去了～ 自测：完美；用别人手机电脑测试：完美！天啊噜，简单到窒</p>
<p> <img src="http://pic.baike.soso.com/p/20130609/bki-20130609135228-704795420.jpg" alt="">  </p>
<p> 红红火火恍恍惚惚哈哈哈哈哈哈哈哈哈哈哈哈哈哈好！～～～～～个屁啊</p>
<p> 嗑嗑，年轻，你听说过苹果有5倍像素比的iMac吧，再听说下Dell的4K屏不错，听说。。。好吧，现在桌面端也早就步入了高清时代，so，这样做在这些设备里图片就是卖女孩的小火柴——全靠意淫。</p>
<p> <img src="http://2d.zol-img.com.cn/product/87/187/cekJDCv3RNGw2.gif" alt=""></p>
<p>好吧，东问西问思索后再三还是得用CSS解决［下面都是把图片作为<code>background-image</code>呈现，这也是我刚开始是想极力避免的，我觉得作为背景就是复杂了，大小控制也不那么简单粗暴（需要通过<code>background-size</code>）］在segmentfault提问之后得到这么一篇文章：<strong><a href="https://timkadlec.com/2012/04/media-query-asset-downloading-results/" target="_blank" rel="external">Media Query &amp; Asset Downloading Results</a></strong></p>
<p>里面很详细的测试了各种方案图片加载情况，我这里就不多废话了，直接上一个有效的方案</p>
<h3 id="嵌套父元素，父元素设置为diaplay-none"><a href="#嵌套父元素，父元素设置为diaplay-none" class="headerlink" title="嵌套父元素，父元素设置为diaplay:none"></a>嵌套父元素，父元素设置为<code>diaplay:none</code></h3><p>我也叫它 <strong>给一个爸爸，然后打死爸爸，就没有儿子了大法</strong></p>
<pre><code>&lt;div class=&quot;par&quot;&gt;
    &lt;div class=&quot;pic&quot;&gt;&lt;/div&gt;
&lt;/div&gt;

.pic {
    background-image:url(&apos;images/test.png&apos;);
    width:200px;
    height:75px;
}
@media all and (max-width: 600px) {
    .par  {
        display:none;
    }
}
</code></pre><p>结果呢？嘿嘿，异常理想，除了Fennec (10.0+)［火狐开发的移动版本？］照例下载了图片之外，其他各种浏览器都只在大于<code>600px</code>的时候下载了图片，如果不闲套个容器麻烦的话，这是个很好的方案！</p>
<p><img src="http://img0.imgtn.bdimg.com/it/u=235478332,2866600352&amp;fm=11&amp;gp=0.jpg" alt="棒呆"></p>
<p>感谢<strong><a href="http://img0.imgtn.bdimg.com/it/u=235478332,2866600352&amp;fm=11&amp;gp=0.jpg" target="_blank" rel="external">鑫旭大神</a></strong> 和 <strong><a href="http://segmentfault.com/q/1010000004170311?_ea=521263" target="_blank" rel="external">回答过这个问题的大家</a></strong> </p>
<p>平安夜，圣诞快乐！！！！这篇是2015年第一也是最后一篇文章哈哈，明年再见～</p>
<p><img src="http://7xntdk.com1.z0.glb.clouddn.com/shengdan.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xntdk.com1.z0.glb.clouddn.com/xihelajijiao.jpg&quot; alt=&quot;西和垃圾角&quot;&gt;&lt;/p&gt;
&lt;p&gt;从前在一个页面中有一张很普通的图片，普通到像这个样子&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;img src=&amp;quot;pic.jpg&amp;quot; alt=&amp;quot;pic&amp;quot;/&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后想要这张图片在移动端(比如&lt;code&gt;max-device-width: 600px&lt;/code&gt;)下的时候隐藏该图片，&lt;br&gt;但是直接&lt;code&gt;display:none&lt;/code&gt;的话发现浏览器还是会加载，这恐怕对于移动端寸KB寸金的资源来说是一场灾难。  &lt;/p&gt;
&lt;p&gt;于是琢磨怎么把图片弄消失掉，秉着能少写就少写写的原则，首先想到&lt;code&gt;img&lt;/code&gt;标签的&lt;code&gt;srcset&lt;/code&gt;属性。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://waynecz.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="css3" scheme="http://waynecz.github.io/tags/css3/"/>
    
      <category term="html" scheme="http://waynecz.github.io/tags/html/"/>
    
      <category term="移动端" scheme="http://waynecz.github.io/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
  </entry>
  
</feed>
